scipy_statistics_scipy_stats
Statistics (scipy.stats)
stats.html
 Building specific distributions  The next examples shows how to build your own distributions. Further examples show the usage of the distributions and some statistical tests. Making a continuous distribution, i.e., subclassing  Making continuous distributions is fairly simple. Interestingly, the is now computed automatically: Be aware of the performance issues mentioned in Performance issues and cautionary remarks . The computation of unspecified common methods can become very slow, since only general methods are called, which, by their very nature, cannot use any specific information about the distribution. Thus, as a cautionary example: But this is not correct: the integral over this pdf should be 1. Let’s make the integration interval smaller: This looks better. However, the problem originated from the fact that the pdf is not specified in the class definition of the deterministic distribution. Subclassing  In the following, we use stats.rv_discrete to generate a discrete distribution that has the probabilities of the truncated normal for the intervals centered around the integers. General info From the docstring of rv_discrete, , “You can construct an arbitrary discrete rv where P{Xxk}  pk by passing to the rv_discrete initialization method (through the values keyword) a tuple of sequences (xk, pk) which describes only those values of X (xk) that occur with nonzero probability (pk).” Next to this, there are some further requirements for this approach to work: The keyword name is required. The support points of the distribution xk have to be integers. The number of significant digits (decimals) needs to be specified. In fact, if the last two requirements are not satisfied, an exception may be raised or the resulting numbers may be incorrect. An example Let’s do the work. First: And, finally, we can subclass : Now that we have defined the distribution, we have access to all common methods of discrete distributions. Testing the implementation Let’s generate a random sample and compare observed frequencies with the probabilities. Next, we can test whether our sample was generated by our norm-discrete distribution. This also verifies whether the random numbers were generated correctly. The chisquare test requires that there are a minimum number of observations in each bin. We combine the tail bins into larger bins so that they contain enough observations. The pvalue in this case is high, so we can be quite confident that our random sample was actually generated by the distribution. 