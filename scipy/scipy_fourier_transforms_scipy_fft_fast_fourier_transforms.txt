scipy_fourier_transforms_scipy_fft
Fourier Transforms (scipy.fft)
fft.html
 Fast Fourier transforms  1-D discrete Fourier transforms  The FFT y[k] of length of the length- sequence x[n] is defined as \[y[k]  \sum_{n0}^{N-1} e^{-2 \pi j \frac{k n}{N} } x[n] \, ,\] and the inverse transform is defined as follows \[x[n]  \frac{1}{N} \sum_{k0}^{N-1} e^{2 \pi j \frac{k n}{N} } y[k] \, .\] These transforms can be calculated by means of fft and ifft , respectively, as shown in the following example. From the definition of the FFT it can be seen that \[y[0]  \sum_{n0}^{N-1} x[n] \, .\] In the example which corresponds to . For N even, the elements contain the positive-frequency terms, and the elements contain the negative-frequency terms, in order of decreasingly negative frequency. For N odd, the elements contain the positive-frequency terms, and the elements contain the negative-frequency terms, in order of decreasingly negative frequency. In case the sequence x is real-valued, the values of for positive frequencies is the conjugate of the values for negative frequencies (because the spectrum is symmetric). Typically, only the FFT corresponding to positive frequencies is plotted. The example plots the FFT of the sum of two sines. The FFT input signal is inherently truncated. This truncation can be modeled as multiplication of an infinite signal with a rectangular window function. In the spectral domain this multiplication becomes convolution of the signal spectrum with the window function spectrum, being of form . This convolution is the cause of an effect called spectral leakage (see [WPW] ). Windowing the signal with a dedicated window function helps mitigate spectral leakage. The example below uses a Blackman window from scipy.signal and shows the effect of windowing (the zero component of the FFT has been truncated for illustrative purposes). In case the sequence x is complex-valued, the spectrum is no longer symmetric. To simplify working with the FFT functions, scipy provides the following two helper functions. The function fftfreq returns the FFT sample frequency points. In a similar spirit, the function fftshift allows swapping the lower and upper halves of a vector, so that it becomes suitable for display. The example below plots the FFT of two complex exponentials; note the asymmetric spectrum. The function rfft calculates the FFT of a real sequence and outputs the complex FFT coefficients for only half of the frequency range. The remaining negative frequency components are implied by the Hermitian symmetry of the FFT for a real input ( ). In case of N being even: ; in case of N being odd . The terms shown explicitly as are restricted to be purely real since, by the hermitian property, they are their own complex conjugate. The corresponding function irfft calculates the IFFT of the FFT coefficients with this special ordering. Notice that the rfft of odd and even length signals are of the same shape. By default, irfft assumes the output signal should be of even length. And so, for odd signals, it will give the wrong result: To recover the original odd-length signal, we must pass the output shape by the n parameter. 2- and N-D discrete Fourier transforms  The functions fft2 and ifft2 provide 2-D FFT and IFFT, respectively. Similarly, fftn and ifftn provide N-D FFT, and IFFT, respectively. For real-input signals, similarly to rfft , we have the functions rfft2 and irfft2 for 2-D real transforms; rfftn and irfftn for N-D real transforms. The example below demonstrates a 2-D IFFT and plots the resulting (2-D) time-domain signals. 