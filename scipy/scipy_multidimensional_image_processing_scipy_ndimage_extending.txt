scipy_multidimensional_image_processing_scipy_ndimage
Multidimensional image processing (scipy.ndimage)
ndimage.html
 Extending scipy.ndimage in C  A few functions in scipy.ndimage take a callback argument. This can be either a python function or a scipy.LowLevelCallable containing a pointer to a C function. Using a C function will generally be more efficient, since it avoids the overhead of calling a python function on many elements of an array. To use a C function, you must write a C extension that contains the callback function and a Python function that returns a scipy.LowLevelCallable containing a pointer to the callback. An example of a function that supports callbacks is geometric_transform , which accepts a callback function that defines a mapping from all output coordinates to corresponding coordinates in the input array. Consider the following python example, which uses geometric_transform to implement a shift function. We can also implement the callback function with the following C code: More information on writing Python extension modules can be found here . If the C code is in the file , then it can be compiled with the following , and now running the script produces the same result as the original python script. In the C version, is the callback function and the parameters and play the same role as they do in the python version, while and provide the equivalents of and . The variable is passed through instead of . Finally, the C callback function returns an integer status, which is one upon success and zero otherwise. The function wraps the callback function in a PyCapsule . The main steps are: Initialize a PyCapsule . The first argument is a pointer to the callback function. The second argument is the function signature, which must match exactly the one expected by ndimage . Above, we used scipy.LowLevelCallable to specify that we generated with ctypes . A different approach would be to supply the data in the capsule context, that can be set by PyCapsule_SetContext and omit specifying in scipy.LowLevelCallable . However, in this approach we would need to deal with allocation/freeing of the data — freeing the data after the capsule has been destroyed can be done by specifying a non-NULL callback function in the third argument of PyCapsule_New . C callback functions for ndimage all follow this scheme. The next section lists the ndimage functions that accept a C callback function and gives the prototype of the function. See also The functions that support low-level callback arguments are: generic_filter , generic_filter1d , geometric_transform Below, we show alternative ways to write the code, using Numba , Cython , ctypes , or cffi instead of writing wrapper code in C. Numba Numba provides a way to write low-level functions easily in Python. We can write the above using Numba as: Cython Functionally the same code as above can be written in Cython with somewhat less boilerplate as follows: cffi With cffi , you can interface with a C function residing in a shared library (DLL). First, we need to write the shared library, which we do in C — this example is for Linux/OSX: The Python code calling the library is: You can find more information in the cffi documentation. ctypes With ctypes , the C code and the compilation of the so/DLL is as for cffi above. The Python code is different: You can find more information in the ctypes documentation. 