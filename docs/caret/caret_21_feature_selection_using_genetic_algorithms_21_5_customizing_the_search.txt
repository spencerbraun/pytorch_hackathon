caret_21_feature_selection_using_genetic_algorithms
21 Feature Selection using Genetic Algorithms
feature-selection-using-genetic-algorithms.html
 21.5 Customizing the Search 21.5.1 The fit Function This function builds the model based on a proposed current subset. The arguments for the function must be: x : the current training set of predictor data with the appropriate subset of variables y : the current outcome data (either a numeric or factor vector) lev : a character vector with the class levels (or NULL for regression problems) last : a logical that is TRUE when the final GA search is conducted on the entire data set ... : optional arguments to pass to the fit function in the call to gafs The function should return a model object that can be used to generate predictions. For random forest, the fit function is simple: 21.5.2 The pred Function This function returns a vector of predictions (numeric or factors) from the current model . The input arguments must be object : the model generated by the fit function x : the current set of predictor set for the held-back samples For random forests, the function is a simple wrapper for the predict function: For classification, it is probably a good idea to ensure that the resulting factor variables of predictions has the same levels as the input data. 21.5.3 The fitness_intern Function The fitness_intern function takes the fitted model and computes one or more performance metrics. The inputs to this function are: object : the model generated by the fit function x : the current set of predictor set. If the option gafsControl$holdout is zero, these values will be from the current resample (i.e. the same data used to fit the model). Otherwise, the predictor values are from the hold-out set created by gafsControl$holdout . y : outcome values. See the note for the x argument to understand which data are presented to the function. maximize : a logical from gafsControl that indicates whether the metric should be maximized or minimized p : the total number of possible predictors The output should be a named numeric vector of performance values. In many cases, some resampled measure of performance is used. In the example above using random forest, the OOB error was used. In other cases, the resampled performance from train can be used and, if gafsControl$holdout is not zero, a static hold-out set can be used. This depends on the data and problem at hand. The example function for random forest is: 21.5.4 The fitness_extern Function The fitness_extern function takes the observed and predicted values form the external resampling process and computes one or more performance metrics. The input arguments are: data : a data frame or predictions generated by the fit function. For regression, the predicted values in a column called pred . For classification, pred is a factor vector. Class probabilities are usually attached as columns whose names are the class levels (see the random forest example for the fit function above) lev : a character vector with the class levels (or NULL for regression problems) The output should be a named numeric vector of performance values. The example function for random forest is: Two functions in caret that can be used as the summary function are defaultSummary and twoClassSummary (for classification problems with two classes). 21.5.5 The initial Function This function creates an initial generation. Inputs are: vars : the number of possible predictors popSize : the population size for each generation ... : not currently used The output should be a binary 0/1 matrix where there are vars columns corresponding to the predictors and popSize rows for the individuals in the population. The default function populates the rows randomly with subset sizes varying between 10% and 90% of number of possible predictors. For example: gafs has an argument called suggestions that is similar to the one in the ga function where the initial population can be seeded with specific subsets. 21.5.6 The selection Function This function conducts the genetic selection. Inputs are: population : the indicators for the current population fitness : the corresponding fitness values for the population. Note that if the internal performance value is to be minimized, these are the negatives of the actual values r , q : tuning parameters for specific selection functions. See gafs_lrSelection and gafs_nlrSelection ... : not currently used The output should be a list with named elements. population : the indicators for the selected individuals fitness : the fitness values for the selected individuals The default function is a version of the GA package’s ga_lrSelection function. 21.5.7 The crossover Function This function conducts the genetic crossover. Inputs are: population : the indicators for the current population fitness : the corresponding fitness values for the population. Note that if the internal performance value is to be minimized, these are the negatives of the actual values parents : a matrix with two rows containing indicators for the parent individuals. ... : not currently used The default function is a version of the GA package’s ga_spCrossover function. Another function that is a version of that package’s uniform cross-over function is also available. . The output should be a list with named elements. children : from ?ga_spCrossover : “a matrix of dimension 2 times the number of decision variables containing the generated offsprings”" fitness : “a vector of length 2 containing the fitness values for the offsprings. A value NA is returned if an offspring is different (which is usually the case) from the two parents.”" 21.5.8 The mutation Function This function conducts the genetic mutation. Inputs are: population : the indicators for the current population parents : a vector of indices for where the mutation should occur. ... : not currently used The default function is a version of the GA package’s gabin_raMutation function. . The output should the mutated population. 21.5.9 The selectIter Function This function determines the optimal number of generations based on the resampling output. Inputs for the function are: x : a matrix with columns for the performance metrics averaged over resamples metric : a character string of the performance measure to optimize (e.g. RMSE, Accuracy) maximize : a single logical for whether the metric should be maximized This function should return an integer corresponding to the optimal subset size. 