caret_19_feature_selection_using_univariate_filters
19 Feature Selection using Univariate Filters
feature-selection-using-univariate-filters.html
 19.2 Basic Syntax Similar to the rfe function, the syntax for sbf is: In this case, the details are specificed using the sbfControl function. Here, the argument functions dictates what the different components should do. This argument should have elements called filter , fit , pred and summary . 19.2.1 The score Function This function takes as inputs the predictors and the outcome in objects called x and y , respectively. By default, each predictor in x is passed to the score function individually. In this case, the function should return a single score. Alternatively, all the predictors can be exposed to the function using the multivariate argument to sbfControl . In this case, the output should be a named vector of scores where the names correspond to the column names of x . There are two built-in functions called anovaScores and gamScores . anovaScores treats the outcome as the independent variable and the predictor as the outcome. In this way, the null hypothesis is that the mean predictor values are equal across the different classes. For regression, gamScores fits a smoothing spline in the predictor to the outcome using a generalized additive model and tests to see if there is any functional relationship between the two. In each function the p-value is used as the score. 19.2.2 The filter Function This function takes as inputs the scores coming out of the score function (in an argument called score ). The function also has the training set data as inputs (arguments are called x and y ). The output should be a named logical vector where the names correspond to the column names of x . Columns with values of TRUE will be used in the subsequent model. 19.2.3 The fit Function The component is very similar to the rfe -specific function described above. For sbf , there are no first or last arguments. The function should have arguments x , y and ... . The data within x have been filtered using the filter function described above. The output of the fit function should be a fitted model. With some data sets, no predictors will survive the filter. In these cases, a model with predictors cannot be computed, but the lack of viable predictors should not be ignored in the final results. To account for this issue, caret contains a model function called nullModel that fits a simple model that is independent of any of the predictors. For problems where the outcome is numeric, the function predicts every sample using the simple mean of the training set outcomes. For classification, the model predicts all samples using the most prevalent class in the training data. This function can be used in the fit component function to “error-trap” cases where no predictors are selected. For example, there are several built-in functions for some models. The object rfSBF is a set of functions that may be useful for fitting random forest models with filtering. The fit function here uses nullModel to check for cases with no predictors: 19.2.4 The summary and pred Functions The summary function is used to calculate model performance on held-out samples. The pred function is used to predict new samples using the current predictor set. The arguments and outputs for these two functions are identical to the previously discussed summary and pred functions in previously described sections. 