scipy_file_io_scipy_io
File IO (scipy.io)
io.html
 MATLAB files  loadmat (file_name[, mdict, appendmat]) Load MATLAB file. savemat (file_name, mdict[, appendmat, …]) Save a dictionary of names and arrays into a MATLAB-style .mat file. whosmat (file_name[, appendmat]) List variables inside a MATLAB file. The basic functions  We’ll start by importing scipy.io and calling it for convenience: If you are using IPython, try tab-completing on . Among the many options, you will find: These are the high-level functions you will most likely use when working with MATLAB files. You’ll also find: This is the package from which , , and are imported. Within , you will find the module This module contains the machinery that and use. From time to time you may find yourself re-using this machinery. How do I start?  You may have a file that you want to read into SciPy. Or, you want to pass some variables from SciPy / NumPy into MATLAB. To save us using a MATLAB license, let’s start in Octave . Octave has MATLAB-compatible save and load functions. Start Octave ( at the command line for me): Now, to Python: Now let’s try the other way round: Then back to Octave: If you want to inspect the contents of a MATLAB file without reading the data into memory, use the command: returns a list of tuples, one for each array (or other object) in the file. Each tuple contains the name, shape and data type of the array. MATLAB structs  MATLAB structs are a little bit like Python dicts, except the field names must be strings. Any MATLAB object can be a value of a field. As for all objects in MATLAB, structs are, in fact, arrays of structs, where a single struct is an array of shape (1, 1). We can load this in Python: In the SciPy versions from 0.12.0, MATLAB structs come back as NumPy structured arrays, with fields named for the struct fields. You can see the field names in the output above. Note also: and: So, in MATLAB, the struct array must be at least 2-D, and we replicate that when we read into SciPy. If you want all length 1 dimensions squeezed out, try this: Sometimes, it’s more convenient to load the MATLAB structs as Python objects rather than NumPy structured arrays - it can make the access syntax in Python a bit more similar to that in MATLAB. In order to do this, use the parameter setting to . works nicely with : Saving struct arrays can be done in various ways. One simple method is to use dicts: loaded as: You can also save structs back again to MATLAB (or Octave in our case) like this: MATLAB cell arrays  Cell arrays in MATLAB are rather like Python lists, in the sense that the elements in the arrays can contain any type of MATLAB object. In fact, they are most similar to NumPy object arrays, and that is how we load them into NumPy. Back to Python: Saving to a MATLAB cell array just involves making a NumPy object array: 