scipy_integration_scipy_integrate
Integration (scipy.integrate)
integrate.html
 Faster integration using low-level callback functions  A user desiring reduced integration times may pass a C function pointer through scipy.LowLevelCallable to quad , dblquad , tplquad or nquad and it will be integrated and return a result in Python. The performance increase here arises from two factors. The primary improvement is faster function evaluation, which is provided by compilation of the function itself. Additionally we have a speedup provided by the removal of function calls between C and Python in quad . This method may provide a speed improvements of ~2x for trivial functions such as sine but can produce a much more noticeable improvements (10x+) for more complex functions. This feature then, is geared towards a user with numerically intensive integrations willing to write a little C to reduce computation time significantly. The approach can be used, for example, via ctypes in a few simple steps: 1.) Write an integrand function in C with the function signature , where is an array containing the point the function f is evaluated at, and to arbitrary additional data you want to provide. 2.) Now compile this file to a shared/dynamic library (a quick search will help with this as it is OS-dependent). The user must link any math libraries, etc., used. On linux this looks like: The output library will be referred to as , but it may have a different file extension. A library has now been created that can be loaded into Python with ctypes . 3.) Load shared library into Python using ctypes and set and - this allows SciPy to interpret the function correctly: The last in the function is optional and can be omitted (both in the C function and ctypes argtypes) if not needed. Note that the coordinates are passed in as an array of doubles rather than a separate argument. 4.) Now integrate the library function as normally, here using nquad : The Python tuple is returned as expected in a reduced amount of time. All optional parameters can be used with this method including specifying singularities, infinite bounds, etc. 