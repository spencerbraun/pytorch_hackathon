scipy_fourier_transforms_scipy_fft
Fourier Transforms (scipy.fft)
fft.html
 Discrete Sine Transforms  SciPy provides a DST [Mak] with the function dst and a corresponding IDST with the function idst . There are, theoretically, 8 types of the DST for different combinations of even/odd boundary conditions and boundary off sets [WPS] , only the first 3 types are implemented in scipy. Type I DST  DST-I assumes the input is odd around n-1 and nN. SciPy uses the following definition of the unnormalized DST-I ( ): \[y[k]  2\sum_{n0}^{N-1} x[n] \sin\left( \pi {(n+1) (k+1)}\over{N+1} \right), \qquad 0 \le k < N.\] Note also that the DST-I is only supported for input size > 1. The (unnormalized) DST-I is its own inverse, up to a factor of 2(N+1) . Type II DST  DST-II assumes the input is odd around n-1/2 and even around nN. SciPy uses the following definition of the unnormalized DST-II ( ): \[y[k]  2 \sum_{n0}^{N-1} x[n] \sin\left( {\pi (n+1/2)(k+1)} \over N \right), \qquad 0 \le k < N.\] Type III DST  DST-III assumes the input is odd around n-1 and even around nN-1. SciPy uses the following definition of the unnormalized DST-III ( ): \[y[k]  (-1)^k x[N-1] + 2 \sum_{n0}^{N-2} x[n] \sin \left( {\pi (n+1)(k+1/2)} \over N \right), \qquad 0 \le k < N.\] DST and IDST  The following example shows the relation between DST and IDST for different types and normalizations. The DST-II and DST-III are each otherâ€™s inverses, so for an orthonormal transform we return back to the original signal. Doing the same under default normalization, however, we pick up an extra scaling factor of since the forward transform is unnormalized. For this reason, we should use the function idst using the same type for both, giving a correctly normalized result. Analogous results can be seen for the DST-I, which is its own inverse up to a factor of . And for the DST-IV, which is also its own inverse up to a factor of . 