scipy_spatial_data_structures_and_algorithms_scipy_spatial
Spatial data structures and algorithms (scipy.spatial)
spatial.html
 Voronoi diagrams  A Voronoi diagram is a subdivision of the space into the nearest neighborhoods of a given set of points. There are two ways to approach this object using scipy.spatial . First, one can use the KDTree to answer the question “which of the points is closest to this one”, and define the regions that way: So the point belongs to region . In color: This does not, however, give the Voronoi diagram as a geometrical object. The representation in terms of lines and points can be again obtained via the Qhull wrappers in scipy.spatial : The Voronoi vertices denote the set of points forming the polygonal edges of the Voronoi regions. In this case, there are 9 different regions: Negative value again indicates a point at infinity. Indeed, only one of the regions, , is bounded. Note here that due to similar numerical precision issues as in Delaunay triangulation above, there may be fewer Voronoi regions than input points. The ridges (lines in 2-D) separating the regions are described as a similar collection of simplices as the convex hull pieces: These numbers present the indices of the Voronoi vertices making up the line segments. is again a point at infinity — only 4 of the 12 lines are a bounded line segment, while others extend to infinity. The Voronoi ridges are perpendicular to the lines drawn between the input points. To which two points each ridge corresponds is also recorded: This information, taken together, is enough to construct the full diagram. We can plot it as follows. First, the points and the Voronoi vertices: Plotting the finite line segments goes as for the convex hull, but now we have to guard for the infinite edges: The ridges extending to infinity require a bit more care: This plot can also be created using scipy.spatial.voronoi_plot_2d . Voronoi diagrams can be used to create interesting generative art. Try playing with the settings of this function to create your own! 