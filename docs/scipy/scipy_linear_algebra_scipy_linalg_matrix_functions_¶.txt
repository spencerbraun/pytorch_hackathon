scipy_linear_algebra_scipy_linalg
Linear Algebra (scipy.linalg)
linalg.html
 Matrix functions  Consider the function with Taylor series expansion \[f\left(x\right)\sum_{k0}^{\infty}\frac{f^{\left(k\right)}\left(0\right)}{k!}x^{k}.\] A matrix function can be defined using this Taylor series for the square matrix as \[f\left(\mathbf{A}\right)\sum_{k0}^{\infty}\frac{f^{\left(k\right)}\left(0\right)}{k!}\mathbf{A}^{k}.\] While this serves as a useful representation of a matrix function, it is rarely the best way to calculate a matrix function. Exponential and logarithm functions  The matrix exponential is one of the more common matrix functions. The preferred method for implementing the matrix exponential is to use scaling and a Padé approximation for . This algorithm is implemented as linalg.expm . The inverse of the matrix exponential is the matrix logarithm defined as the inverse of the matrix exponential: \[\mathbf{A}\equiv\exp\left(\log\left(\mathbf{A}\right)\right).\] The matrix logarithm can be obtained with linalg.logm . Trigonometric functions  The trigonometric functions, , , and , are implemented for matrices in linalg.sinm , linalg.cosm , and linalg.tanm , respectively. The matrix sine and cosine can be defined using Euler’s identity as \begin{eqnarray*} \sin\left(\mathbf{A}\right) &  & \frac{e^{j\mathbf{A}}-e^{-j\mathbf{A}}}{2j}\\ \cos\left(\mathbf{A}\right) &  & \frac{e^{j\mathbf{A}}+e^{-j\mathbf{A}}}{2}.\end{eqnarray*} The tangent is \[\tan\left(x\right)\frac{\sin\left(x\right)}{\cos\left(x\right)}\left[\cos\left(x\right)\right]^{-1}\sin\left(x\right)\] and so the matrix tangent is defined as \[\left[\cos\left(\mathbf{A}\right)\right]^{-1}\sin\left(\mathbf{A}\right).\] Hyperbolic trigonometric functions  The hyperbolic trigonometric functions, , , and , can also be defined for matrices using the familiar definitions: \begin{eqnarray*} \sinh\left(\mathbf{A}\right) &  & \frac{e^{\mathbf{A}}-e^{-\mathbf{A}}}{2}\\ \cosh\left(\mathbf{A}\right) &  & \frac{e^{\mathbf{A}}+e^{-\mathbf{A}}}{2}\\ \tanh\left(\mathbf{A}\right) &  & \left[\cosh\left(\mathbf{A}\right)\right]^{-1}\sinh\left(\mathbf{A}\right).\end{eqnarray*} These matrix functions can be found using linalg.sinhm , linalg.coshm , and linalg.tanhm . Arbitrary function  Finally, any arbitrary function that takes one complex number and returns a complex number can be called as a matrix function using the command linalg.funm . This command takes the matrix and an arbitrary Python function. It then implements an algorithm from Golub and Van Loan’s book “Matrix Computations” to compute the function applied to the matrix using a Schur decomposition. Note that the function needs to accept complex numbers as input in order to work with this algorithm. For example, the following code computes the zeroth-order Bessel function applied to a matrix. Note how, by virtue of how matrix analytic functions are defined, the Bessel function has acted on the matrix eigenvalues. 