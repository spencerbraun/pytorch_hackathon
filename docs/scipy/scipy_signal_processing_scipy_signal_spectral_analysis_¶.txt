scipy_signal_processing_scipy_signal
Signal Processing (scipy.signal)
signal.html
 Spectral Analysis  Periodogram Measurements  The scipy function periodogram provides a method to estimate the spectral density using the periodogram method. The example below calculates the periodogram of a sine signal in white Gaussian noise. Spectral Analysis using Welch’s Method  An improved method, especially with respect to noise immunity, is Welch’s method, which is implemented by the scipy function welch . The example below estimates the spectrum using Welch’s method and uses the same parameters as the example above. Note the much smoother noise floor of the spectrogram. Lomb-Scargle Periodograms ( lombscargle )  Least-squares spectral analysis (LSSA) 1 2 is a method of estimating a frequency spectrum, based on a least-squares fit of sinusoids to data samples, similar to Fourier analysis. Fourier analysis, the most used spectral method in science, generally boosts long-periodic noise in long-gapped records; LSSA mitigates such problems. The Lomb-Scargle method performs spectral analysis on unevenly-sampled data and is known to be a powerful way to find, and test the significance of, weak periodic signals. For a time series comprising measurements sampled at times , where , assumed to have been scaled and shifted, such that its mean is zero and its variance is unity, the normalized Lomb-Scargle periodogram at frequency is \[P_{n}(f) \frac{1}{2}\left\{\frac{\left[\sum_{j}^{N_{t}}X_{j}\cos\omega(t_{j}-\tau)\right]^{2}}{\sum_{j}^{N_{t}}\cos^{2}\omega(t_{j}-\tau)}+\frac{\left[\sum_{j}^{N_{t}}X_{j}\sin\omega(t_{j}-\tau)\right]^{2}}{\sum_{j}^{N_{t}}\sin^{2}\omega(t_{j}-\tau)}\right\}.\] Here, is the angular frequency. The frequency-dependent time offset is given by \[\tan 2\omega\tau  \frac{\sum_{j}^{N_{t}}\sin 2\omega t_{j}}{\sum_{j}^{N_{t}}\cos 2\omega t_{j}}.\] The lombscargle function calculates the periodogram using a slightly modified algorithm due to Townsend 3 , which allows the periodogram to be calculated using only a single pass through the input arrays for each frequency. The equation is refactored as: \[P_{n}(f)  \frac{1}{2}\left[\frac{(c_{\tau}XC + s_{\tau}XS)^{2}}{c_{\tau}^{2}CC + 2c_{\tau}s_{\tau}CS + s_{\tau}^{2}SS} + \frac{(c_{\tau}XS - s_{\tau}XC)^{2}}{c_{\tau}^{2}SS - 2c_{\tau}s_{\tau}CS + s_{\tau}^{2}CC}\right]\] and \[\tan 2\omega\tau  \frac{2CS}{CC-SS}.\] Here, \[c_{\tau}  \cos\omega\tau,\qquad s_{\tau}  \sin\omega\tau,\] while the sums are \[\begin{split}XC & \sum_{j}^{N_{t}} X_{j}\cos\omega t_{j}\\ XS & \sum_{j}^{N_{t}} X_{j}\sin\omega t_{j}\\ CC & \sum_{j}^{N_{t}} \cos^{2}\omega t_{j}\\ SS & \sum_{j}^{N_{t}} \sin^{2}\omega t_{j}\\ CS & \sum_{j}^{N_{t}} \cos\omega t_{j}\sin\omega t_{j}.\end{split}\] This requires trigonometric function evaluations giving a factor of speed increase over the straightforward implementation. 