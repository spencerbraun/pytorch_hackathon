scipy_interpolation_scipy_interpolate
Interpolation (scipy.interpolate)
interpolate.html
 Spline interpolation  Spline interpolation in 1-D: Procedural (interpolate.splXXX)  Spline interpolation requires two essential steps: (1) a spline representation of the curve is computed, and (2) the spline is evaluated at the desired points. In order to find the spline representation, there are two different ways to represent a curve and obtain (smoothing) spline coefficients: directly and parametrically. The direct method finds the spline representation of a curve in a 2-D plane using the function splrep . The first two arguments are the only ones required, and these provide the and components of the curve. The normal output is a 3-tuple, , containing the knot-points, , the coefficients and the order of the spline. The default spline order is cubic, but this can be changed with the input keyword, k. For curves in N-D space the function splprep allows defining the curve parametrically. For this function only 1 input argument is required. This input is a list of -arrays representing the curve in N-D space. The length of each array is the number of curve points, and each array provides one component of the N-D data point. The parameter variable is given with the keyword argument, u, , which defaults to an equally-spaced monotonic sequence between and . The default output consists of two objects: a 3-tuple, , containing the spline representation and the parameter variable The keyword argument, s , is used to specify the amount of smoothing to perform during the spline fit. The default value of is where is the number of data-points being fit. Therefore, if no smoothing is desired a value of should be passed to the routines. Once the spline representation of the data has been determined, functions are available for evaluating the spline ( splev ) and its derivatives ( splev , spalde ) at any point and the integral of the spline between any two points ( splint ). In addition, for cubic splines ( ) with 8 or more knots, the roots of the spline can be estimated ( sproot ). These functions are demonstrated in the example that follows. Cubic-spline Derivative of spline Integral of spline Roots of spline Notice that sproot failed to find an obvious solution at the edge of the approximation interval, . If we define the spline on a slightly larger interval, we recover both roots and : Parametric spline Spline interpolation in 1-d: Object-oriented ( UnivariateSpline )  The spline-fitting capabilities described above are also available via an objected-oriented interface. The 1-D splines are objects of the UnivariateSpline class, and are created with the and components of the curve provided as arguments to the constructor. The class defines __call__ , allowing the object to be called with the x-axis values, at which the spline should be evaluated, returning the interpolated y-values. This is shown in the example below for the subclass InterpolatedUnivariateSpline . The integral , derivatives , and roots methods are also available on UnivariateSpline objects, allowing definite integrals, derivatives, and roots to be computed for the spline. The UnivariateSpline class can also be used to smooth data by providing a non-zero value of the smoothing parameter s , with the same meaning as the s keyword of the splrep function described above. This results in a spline that has fewer knots than the number of data points, and hence is no longer strictly an interpolating spline, but rather a smoothing spline. If this is not desired, the InterpolatedUnivariateSpline class is available. It is a subclass of UnivariateSpline that always passes through all points (equivalent to forcing the smoothing parameter to 0). This class is demonstrated in the example below. The LSQUnivariateSpline class is the other subclass of UnivariateSpline . It allows the user to specify the number and location of internal knots explicitly with the parameter t . This allows for the creation of customized splines with non-linear spacing, to interpolate in some domains and smooth in others, or change the character of the spline. InterpolatedUnivariateSpline LSQUnivarateSpline with non-uniform knots 2-D spline representation: Procedural ( bisplrep )  For (smooth) spline-fitting to a 2-D surface, the function bisplrep is available. This function takes as required inputs the 1-D arrays x , y , and z , which represent points on the surface The default output is a list whose entries represent respectively, the components of the knot positions, the coefficients of the spline, and the order of the spline in each coordinate. It is convenient to hold this list in a single object, tck, so that it can be passed easily to the function bisplev . The keyword, s , can be used to change the amount of smoothing performed on the data while determining the appropriate spline. The default value is , where is the number of data points in the x, y, and z vectors. As a result, if no smoothing is desired, then should be passed to bisplrep . To evaluate the 2-D spline and its partial derivatives (up to the order of the spline), the function bisplev is required. This function takes as the first two arguments two 1-D arrays whose cross-product specifies the domain over which to evaluate the spline. The third argument is the tck list returned from bisplrep . If desired, the fourth and fifth arguments provide the orders of the partial derivative in the and direction, respectively. It is important to note that 2-D interpolation should not be used to find the spline representation of images. The algorithm used is not amenable to large numbers of input points. The signal-processing toolbox contains more appropriate algorithms for finding the spline representation of an image. The 2-D interpolation commands are intended for use when interpolating a 2-D function as shown in the example that follows. This example uses the mgrid command in NumPy which is useful for defining a “mesh-grid” in many dimensions. (See also the ogrid command if the full-mesh is not needed). The number of output arguments and the number of dimensions of each argument is determined by the number of indexing objects passed in mgrid . Define function over a sparse 20x20 grid Interpolate function over a new 70x70 grid 2-D spline representation: Object-oriented ( BivariateSpline )  The BivariateSpline class is the 2-D analog of the UnivariateSpline class. It and its subclasses implement the FITPACK functions described above in an object-oriented fashion, allowing objects to be instantiated that can be called to compute the spline value by passing in the two coordinates as the two arguments. 