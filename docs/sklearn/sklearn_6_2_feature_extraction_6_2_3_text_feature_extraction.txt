sklearn_6_2_feature_extraction
6.2. Feature extraction
modules/feature_extraction.html
 6.2.3. Text feature extraction  6.2.3.1. The Bag of Words representation  Text Analysis is a major application field for machine learning algorithms. However the raw data, a sequence of symbols cannot be fed directly to the algorithms themselves as most of them expect numerical feature vectors with a fixed size rather than the raw text documents with variable length. In order to address this, scikit-learn provides utilities for the most common ways to extract numerical features from text content, namely: tokenizing strings and giving an integer id for each possible token, for instance by using white-spaces and punctuation as token separators. counting the occurrences of tokens in each document. normalizing and weighting with diminishing importance tokens that occur in the majority of samples / documents. In this scheme, features and samples are defined as follows: each individual token occurrence frequency (normalized or not) is treated as a feature . the vector of all the token frequencies for a given document is considered a multivariate sample . A corpus of documents can thus be represented by a matrix with one row per document and one column per token (e.g. word) occurring in the corpus. We call vectorization the general process of turning a collection of text documents into numerical feature vectors. This specific strategy (tokenization, counting and normalization) is called the Bag of Words or “Bag of n-grams” representation. Documents are described by word occurrences while completely ignoring the relative position information of the words in the document. 6.2.3.2. Sparsity  As most documents will typically use a very small subset of the words used in the corpus, the resulting matrix will have many feature values that are zeros (typically more than 99% of them). For instance a collection of 10,000 short text documents (such as emails) will use a vocabulary with a size in the order of 100,000 unique words in total while each document will use 100 to 1000 unique words individually. In order to be able to store such a matrix in memory but also to speed up algebraic operations matrix / vector, implementations will typically use a sparse representation such as the implementations available in the package. 6.2.3.3. Common Vectorizer usage  CountVectorizer implements both tokenization and occurrence counting in a single class: This model has many parameters, however the default values are quite reasonable (please see the reference documentation for the details): Let’s use it to tokenize and count the word occurrences of a minimalistic corpus of text documents: The default configuration tokenizes the string by extracting words of at least 2 letters. The specific function that does this step can be requested explicitly: Each term found by the analyzer during the fit is assigned a unique integer index corresponding to a column in the resulting matrix. This interpretation of the columns can be retrieved as follows: The converse mapping from feature name to column index is stored in the attribute of the vectorizer: Hence words that were not seen in the training corpus will be completely ignored in future calls to the transform method: Note that in the previous corpus, the first and the last documents have exactly the same words hence are encoded in equal vectors. In particular we lose the information that the last document is an interrogative form. To preserve some of the local ordering information we can extract 2-grams of words in addition to the 1-grams (individual words): The vocabulary extracted by this vectorizer is hence much bigger and can now resolve ambiguities encoded in local positioning patterns: In particular the interrogative form “Is this” is only present in the last document: 6.2.3.3.1. Using stop words  Stop words are words like “and”, “the”, “him”, which are presumed to be uninformative in representing the content of a text, and which may be removed to avoid them being construed as signal for prediction. Sometimes, however, similar words are useful for prediction, such as in classifying writing style or personality. There are several known issues in our provided ‘english’ stop word list. It does not aim to be a general, ‘one-size-fits-all’ solution as some tasks may require a more custom solution. See [NQY18] for more details. Please take care in choosing a stop word list. Popular stop word lists may include words that are highly informative to some tasks, such as computer . You should also make sure that the stop word list has had the same preprocessing and tokenization applied as the one used in the vectorizer. The word we’ve is split into we and ve by CountVectorizer’s default tokenizer, so if we’ve is in , but ve is not, ve will be retained from we’ve in transformed text. Our vectorizers will try to identify and warn about some kinds of inconsistencies. References NQY18 J. Nothman, H. Qin and R. Yurchak (2018). “Stop Word Lists in Free Open-source Software Packages” . In Proc. Workshop for NLP Open Source Software . 6.2.3.4. Tf–idf term weighting  In a large text corpus, some words will be very present (e.g. “the”, “a”, “is” in English) hence carrying very little meaningful information about the actual contents of the document. If we were to feed the direct count data directly to a classifier those very frequent terms would shadow the frequencies of rarer yet more interesting terms. In order to re-weight the count features into floating point values suitable for usage by a classifier it is very common to use the tf–idf transform. Tf means term-frequency while tf–idf means term-frequency times inverse document-frequency : . Using the ’s default settings, the term frequency, the number of times a term occurs in a given document, is multiplied with idf component, which is computed as , where is the total number of documents in the document set, and is the number of documents in the document set that contain term . The resulting tf-idf vectors are then normalized by the Euclidean norm: . This was originally a term weighting scheme developed for information retrieval (as a ranking function for search engines results) that has also found good use in document classification and clustering. The following sections contain further explanations and examples that illustrate how the tf-idfs are computed exactly and how the tf-idfs computed in scikit-learn’s TfidfTransformer and TfidfVectorizer differ slightly from the standard textbook notation that defines the idf as In the TfidfTransformer and TfidfVectorizer with , the “1” count is added to the idf instead of the idf’s denominator: This normalization is implemented by the TfidfTransformer class: Again please see the reference documentation for the details on all the parameters. Let’s take an example with the following counts. The first term is present 100% of the time hence not very interesting. The two other features only in less than 50% of the time hence probably more representative of the content of the documents: Each row is normalized to have unit Euclidean norm: For example, we can compute the tf-idf of the first term in the first document in the array as follows: Now, if we repeat this computation for the remaining 2 terms in the document, we get and the vector of raw tf-idfs: Then, applying the Euclidean (L2) norm, we obtain the following tf-idfs for document 1: Furthermore, the default parameter adds “1” to the numerator and denominator as if an extra document was seen containing every term in the collection exactly once, which prevents zero divisions: Using this modification, the tf-idf of the third term in document 1 changes to 1.8473: And the L2-normalized tf-idf changes to : The weights of each feature computed by the method call are stored in a model attribute: As tf–idf is very often used for text features, there is also another class called TfidfVectorizer that combines all the options of CountVectorizer and TfidfTransformer in a single model: While the tf–idf normalization is often very useful, there might be cases where the binary occurrence markers might offer better features. This can be achieved by using the parameter of CountVectorizer . In particular, some estimators such as Bernoulli Naive Bayes explicitly model discrete boolean random variables. Also, very short texts are likely to have noisy tf–idf values while the binary occurrence info is more stable. As usual the best way to adjust the feature extraction parameters is to use a cross-validated grid search, for instance by pipelining the feature extractor with a classifier: Sample pipeline for text feature extraction and evaluation 6.2.3.5. Decoding text files  Text is made of characters, but files are made of bytes. These bytes represent characters according to some encoding . To work with text files in Python, their bytes must be decoded to a character set called Unicode. Common encodings are ASCII, Latin-1 (Western Europe), KOI8-R (Russian) and the universal encodings UTF-8 and UTF-16. Many others exist. Note An encoding can also be called a ‘character set’, but this term is less accurate: several encodings can exist for a single character set. The text feature extractors in scikit-learn know how to decode text files, but only if you tell them what encoding the files are in. The CountVectorizer takes an parameter for this purpose. For modern text files, the correct encoding is probably UTF-8, which is therefore the default ( ). If the text you are loading is not actually encoded with UTF-8, however, you will get a . The vectorizers can be told to be silent about decoding errors by setting the parameter to either or . See the documentation for the Python function for more details (type at the Python prompt). If you are having trouble decoding text, here are some things to try: Find out what the actual encoding of the text is. The file might come with a header or README that tells you the encoding, or there might be some standard encoding you can assume based on where the text comes from. You may be able to find out what kind of encoding it is in general using the UNIX command . The Python module comes with a script called that will guess the specific encoding, though you cannot rely on its guess being correct. You could try UTF-8 and disregard the errors. You can decode byte strings with to replace all decoding errors with a meaningless character, or set in the vectorizer. This may damage the usefulness of your features. Real text may come from a variety of sources that may have used different encodings, or even be sloppily decoded in a different encoding than the one it was encoded with. This is common in text retrieved from the Web. The Python package ftfy can automatically sort out some classes of decoding errors, so you could try decoding the unknown text as and then using to fix errors. If the text is in a mish-mash of encodings that is simply too hard to sort out (which is the case for the 20 Newsgroups dataset), you can fall back on a simple single-byte encoding such as . Some text may display incorrectly, but at least the same sequence of bytes will always represent the same feature. For example, the following snippet uses (not shipped with scikit-learn, must be installed separately) to figure out the encoding of three texts. It then vectorizes the texts and prints the learned vocabulary. The output is not shown here. (Depending on the version of , it might get the first one wrong.) For an introduction to Unicode and character encodings in general, see Joel Spolsky’s Absolute Minimum Every Software Developer Must Know About Unicode . 6.2.3.6. Applications and examples  The bag of words representation is quite simplistic but surprisingly useful in practice. In particular in a supervised setting it can be successfully combined with fast and scalable linear models to train document classifiers , for instance: Classification of text documents using sparse features In an unsupervised setting it can be used to group similar documents together by applying clustering algorithms such as K-means : Clustering text documents using k-means Finally it is possible to discover the main topics of a corpus by relaxing the hard assignment constraint of clustering, for instance by using Non-negative matrix factorization (NMF or NNMF) : Topic extraction with Non-negative Matrix Factorization and Latent Dirichlet Allocation 6.2.3.7. Limitations of the Bag of Words representation  A collection of unigrams (what bag of words is) cannot capture phrases and multi-word expressions, effectively disregarding any word order dependence. Additionally, the bag of words model doesn’t account for potential misspellings or word derivations. N-grams to the rescue! Instead of building a simple collection of unigrams (n1), one might prefer a collection of bigrams (n2), where occurrences of pairs of consecutive words are counted. One might alternatively consider a collection of character n-grams, a representation resilient against misspellings and derivations. For example, let’s say we’re dealing with a corpus of two documents: . The second document contains a misspelling of the word ‘words’. A simple bag of words representation would consider these two as very distinct documents, differing in both of the two possible features. A character 2-gram representation, however, would find the documents matching in 4 out of 8 features, which may help the preferred classifier decide better: In the above example, analyzer is used, which creates n-grams only from characters inside word boundaries (padded with space on each side). The analyzer, alternatively, creates n-grams that span across words: The word boundaries-aware variant is especially interesting for languages that use white-spaces for word separation as it generates significantly less noisy features than the raw variant in that case. For such languages it can increase both the predictive accuracy and convergence speed of classifiers trained using such features while retaining the robustness with regards to misspellings and word derivations. While some local positioning information can be preserved by extracting n-grams instead of individual words, bag of words and bag of n-grams destroy most of the inner structure of the document and hence most of the meaning carried by that internal structure. In order to address the wider task of Natural Language Understanding, the local structure of sentences and paragraphs should thus be taken into account. Many such models will thus be casted as “Structured output” problems which are currently outside of the scope of scikit-learn. 6.2.3.8. Vectorizing a large text corpus with the hashing trick  The above vectorization scheme is simple but the fact that it holds an in- memory mapping from the string tokens to the integer feature indices (the attribute) causes several problems when dealing with large datasets : the larger the corpus, the larger the vocabulary will grow and hence the memory use too, fitting requires the allocation of intermediate data structures of size proportional to that of the original dataset. building the word-mapping requires a full pass over the dataset hence it is not possible to fit text classifiers in a strictly online manner. pickling and un-pickling vectorizers with a large can be very slow (typically much slower than pickling / un-pickling flat data structures such as a NumPy array of the same size), it is not easily possible to split the vectorization work into concurrent sub tasks as the attribute would have to be a shared state with a fine grained synchronization barrier: the mapping from token string to feature index is dependent on ordering of the first occurrence of each token hence would have to be shared, potentially harming the concurrent workers’ performance to the point of making them slower than the sequential variant. It is possible to overcome those limitations by combining the “hashing trick” ( Feature hashing ) implemented by the sklearn.feature_extraction.FeatureHasher class and the text preprocessing and tokenization features of the CountVectorizer . This combination is implementing in HashingVectorizer , a transformer class that is mostly API compatible with CountVectorizer . HashingVectorizer is stateless, meaning that you don’t have to call on it: You can see that 16 non-zero feature tokens were extracted in the vector output: this is less than the 19 non-zeros extracted previously by the CountVectorizer on the same toy corpus. The discrepancy comes from hash function collisions because of the low value of the parameter. In a real world setting, the parameter can be left to its default value of (roughly one million possible features). If memory or downstream models size is an issue selecting a lower value such as might help without introducing too many additional collisions on typical text classification tasks. Note that the dimensionality does not affect the CPU training time of algorithms which operate on CSR matrices ( , , , ) but it does for algorithms that work with CSC matrices ( , , etc). Let’s try again with the default setting: We no longer get the collisions, but this comes at the expense of a much larger dimensionality of the output space. Of course, other terms than the 19 used here might still collide with each other. The HashingVectorizer also comes with the following limitations: it is not possible to invert the model (no method), nor to access the original string representation of the features, because of the one-way nature of the hash function that performs the mapping. it does not provide IDF weighting as that would introduce statefulness in the model. A TfidfTransformer can be appended to it in a pipeline if required. 6.2.3.9. Performing out-of-core scaling with HashingVectorizer  An interesting development of using a HashingVectorizer is the ability to perform out-of-core scaling. This means that we can learn from data that does not fit into the computer’s main memory. A strategy to implement out-of-core scaling is to stream data to the estimator in mini-batches. Each mini-batch is vectorized using HashingVectorizer so as to guarantee that the input space of the estimator has always the same dimensionality. The amount of memory used at any time is thus bounded by the size of a mini-batch. Although there is no limit to the amount of data that can be ingested using such an approach, from a practical point of view the learning time is often limited by the CPU time one wants to spend on the task. For a full-fledged example of out-of-core scaling in a text classification task see Out-of-core classification of text documents . 6.2.3.10. Customizing the vectorizer classes  It is possible to customize the behavior by passing a callable to the vectorizer constructor: In particular we name: : a callable that takes an entire document as input (as a single string), and returns a possibly transformed version of the document, still as an entire string. This can be used to remove HTML tags, lowercase the entire document, etc. : a callable that takes the output from the preprocessor and splits it into tokens, then returns a list of these. : a callable that replaces the preprocessor and tokenizer. The default analyzers all call the preprocessor and tokenizer, but custom analyzers will skip this. N-gram extraction and stop word filtering take place at the analyzer level, so a custom analyzer may have to reproduce these steps. (Lucene users might recognize these names, but be aware that scikit-learn concepts may not map one-to-one onto Lucene concepts.) To make the preprocessor, tokenizer and analyzers aware of the model parameters it is possible to derive from the class and override the , and factory methods instead of passing custom functions. Some tips and tricks: If documents are pre-tokenized by an external package, then store them in files (or strings) with the tokens separated by whitespace and pass Fancy token-level analysis such as stemming, lemmatizing, compound splitting, filtering based on part-of-speech, etc. are not included in the scikit-learn codebase, but can be added by customizing either the tokenizer or the analyzer. Here’s a with a tokenizer and lemmatizer using NLTK : (Note that this will not filter out punctuation.) The following example will, for instance, transform some British spelling to American spelling: for other styles of preprocessing; examples include stemming, lemmatization, or normalizing numerical tokens, with the latter illustrated in: Biclustering documents with the Spectral Co-clustering algorithm Customizing the vectorizer can also be useful when handling Asian languages that do not use an explicit word separator such as whitespace. 