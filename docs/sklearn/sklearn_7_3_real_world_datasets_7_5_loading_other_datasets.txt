sklearn_7_3_real_world_datasets
7.3. Real world datasets
datasets/index.html#real-world-datasets
 7.5. Loading other datasets  7.5.1. Sample images  Scikit-learn also embed a couple of sample JPEG images published under Creative Commons license by their authors. Those images can be useful to test algorithms and pipeline on 2D data. load_sample_images () Load sample images for image manipulation. load_sample_image (image_name) Load the numpy array of a single sample image Warning The default coding of images is based on the dtype to spare memory. Often machine learning algorithms work best if the input is converted to a floating point representation first. Also, if you plan to use don’t forget to scale to the range 0 - 1 as done in the following example. Examples: Color Quantization using K-Means 7.5.2. Datasets in svmlight / libsvm format  scikit-learn includes utility functions for loading datasets in the svmlight / libsvm format. In this format, each line takes the form . This format is especially suitable for sparse datasets. In this module, scipy sparse CSR matrices are used for and numpy arrays are used for . You may load a dataset like as follows: You may also load two (or more) datasets at once: In this case, and are guaranteed to have the same number of features. Another way to achieve the same result is to fix the number of features: Related links: Public datasets in svmlight / libsvm format : https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets Faster API-compatible implementation : https://github.com/mblondel/svmlight-loader 7.5.3. Downloading datasets from the openml.org repository  openml.org is a public repository for machine learning data and experiments, that allows everybody to upload open datasets. The package is able to download datasets from the repository using the function sklearn.datasets.fetch_openml . For example, to download a dataset of gene expressions in mice brains: To fully specify a dataset, you need to provide a name and a version, though the version is optional, see Dataset Versions below. The dataset contains a total of 1080 examples belonging to 8 different classes: You can get more information on the dataset by looking at the and attributes: The contains a free-text description of the data, while contains a dictionary of meta-data stored by openml, like the dataset id. For more details, see the OpenML documentation The of the mice protein dataset is 40966, and you can use this (or the name) to get more information on the dataset on the openml website: The also uniquely identifies a dataset from OpenML: 7.5.3.1. Dataset Versions  A dataset is uniquely specified by its , but not necessarily by its name. Several different “versions” of a dataset with the same name can exist which can contain entirely different datasets. If a particular version of a dataset has been found to contain significant issues, it might be deactivated. Using a name to specify a dataset will yield the earliest version of a dataset that is still active. That means that can yield different results at different times if earlier versions become inactive. You can see that the dataset with 40966 that we fetched above is the version 1 of the “miceprotein” dataset: In fact, this dataset only has one version. The iris dataset on the other hand has multiple versions: Specifying the dataset by the name “iris” yields the lowest version, version 1, with the 61. To make sure you always get this exact dataset, it is safest to specify it by the dataset . The other dataset, with 969, is version 3 (version 2 has become inactive), and contains a binarized version of the data: You can also specify both the name and the version, which also uniquely identifies the dataset: References: Vanschoren, van Rijn, Bischl and Torgo “OpenML: networked science in machine learning” , ACM SIGKDD Explorations Newsletter, 15(2), 49-60, 2014. 7.5.4. Loading from external datasets  scikit-learn works on any numeric data stored as numpy arrays or scipy sparse matrices. Other types that are convertible to numeric arrays such as pandas DataFrame are also acceptable. Here are some recommended ways to load standard columnar data into a format usable by scikit-learn: pandas.io provides tools to read data from common formats including CSV, Excel, JSON and SQL. DataFrames may also be constructed from lists of tuples or dicts. Pandas handles heterogeneous data smoothly and provides tools for manipulation and conversion into a numeric array suitable for scikit-learn. scipy.io specializes in binary formats often used in scientific computing context such as .mat and .arff numpy/routines.io for standard loading of columnar data into numpy arrays scikit-learn’s datasets.load_svmlight_file for the svmlight or libSVM sparse format scikit-learn’s datasets.load_files for directories of text files where the name of each directory is the name of each category and each file inside of each directory corresponds to one sample from that category For some miscellaneous data such as images, videos, and audio, you may wish to refer to: skimage.io or Imageio for loading images and videos into numpy arrays scipy.io.wavfile.read for reading WAV files into a numpy array Categorical (or nominal) features stored as strings (common in pandas DataFrames) will need converting to numerical features using sklearn.preprocessing.OneHotEncoder or sklearn.preprocessing.OrdinalEncoder or similar. See Preprocessing data . Note: if you manage your own numerical data it is recommended to use an optimized file format such as HDF5 to reduce data load times. Various libraries such as H5Py, PyTables and pandas provides a Python interface for reading and writing data in that format. 