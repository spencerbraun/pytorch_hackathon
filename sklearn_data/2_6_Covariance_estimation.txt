<div class="section" id="covariance-estimation">
<span id="covariance"></span><h1>2.6. Covariance estimation<a class="headerlink" href="#covariance-estimation" title="Permalink to this headline">¶</a></h1>
<p>Many statistical problems require the estimation of a
population’s covariance matrix, which can be seen as an estimation of
data set scatter plot shape. Most of the time, such an estimation has
to be done on a sample whose properties (size, structure, homogeneity)
have a large influence on the estimation’s quality. The
<a class="reference internal" href="classes.html#module-sklearn.covariance" title="sklearn.covariance"><code class="xref py py-mod docutils literal notranslate"><span class="pre">sklearn.covariance</span></code></a> package provides tools for accurately estimating
a population’s covariance matrix under various settings.</p>
<p>We assume that the observations are independent and identically
distributed (i.i.d.).</p>
<div class="section" id="empirical-covariance">
<h2>2.6.1. Empirical covariance<a class="headerlink" href="#empirical-covariance" title="Permalink to this headline">¶</a></h2>
<p>The covariance matrix of a data set is known to be well approximated
by the classical <em>maximum likelihood estimator</em> (or “empirical
covariance”), provided the number of observations is large enough
compared to the number of features (the variables describing the
observations). More precisely, the Maximum Likelihood Estimator of a
sample is an unbiased estimator of the corresponding population’s
covariance matrix.</p>
<p>The empirical covariance matrix of a sample can be computed using the
<a class="reference internal" href="generated/sklearn.covariance.empirical_covariance.html#sklearn.covariance.empirical_covariance" title="sklearn.covariance.empirical_covariance"><code class="xref py py-func docutils literal notranslate"><span class="pre">empirical_covariance</span></code></a> function of the package, or by fitting an
<a class="reference internal" href="generated/sklearn.covariance.EmpiricalCovariance.html#sklearn.covariance.EmpiricalCovariance" title="sklearn.covariance.EmpiricalCovariance"><code class="xref py py-class docutils literal notranslate"><span class="pre">EmpiricalCovariance</span></code></a> object to the data sample with the
<a class="reference internal" href="generated/sklearn.covariance.EmpiricalCovariance.html#sklearn.covariance.EmpiricalCovariance.fit" title="sklearn.covariance.EmpiricalCovariance.fit"><code class="xref py py-meth docutils literal notranslate"><span class="pre">EmpiricalCovariance.fit</span></code></a> method. Be careful that results depend
on whether the data are centered, so one may want to use the
<code class="docutils literal notranslate"><span class="pre">assume_centered</span></code> parameter accurately. More precisely, if
<code class="docutils literal notranslate"><span class="pre">assume_centered=False</span></code>, then the test set is supposed to have the
same mean vector as the training set. If not, both should be centered
by the user, and <code class="docutils literal notranslate"><span class="pre">assume_centered=True</span></code> should be used.</p>
<div class="topic">
<p class="topic-title">Examples:</p>
<ul class="simple">
<li><p>See <a class="reference internal" href="../auto_examples/covariance/plot_covariance_estimation.html#sphx-glr-auto-examples-covariance-plot-covariance-estimation-py"><span class="std std-ref">Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood</span></a> for
an example on how to fit an <a class="reference internal" href="generated/sklearn.covariance.EmpiricalCovariance.html#sklearn.covariance.EmpiricalCovariance" title="sklearn.covariance.EmpiricalCovariance"><code class="xref py py-class docutils literal notranslate"><span class="pre">EmpiricalCovariance</span></code></a> object
to data.</p></li>
</ul>
</div>
</div>
<div class="section" id="shrunk-covariance">
<span id="id1"></span><h2>2.6.2. Shrunk Covariance<a class="headerlink" href="#shrunk-covariance" title="Permalink to this headline">¶</a></h2>
<div class="section" id="basic-shrinkage">
<h3>2.6.2.1. Basic shrinkage<a class="headerlink" href="#basic-shrinkage" title="Permalink to this headline">¶</a></h3>
<p>Despite being an unbiased estimator of the covariance matrix, the
Maximum Likelihood Estimator is not a good estimator of the
eigenvalues of the covariance matrix, so the precision matrix obtained
from its inversion is not accurate. Sometimes, it even occurs that the
empirical covariance matrix cannot be inverted for numerical
reasons. To avoid such an inversion problem, a transformation of the
empirical covariance matrix has been introduced: the <code class="docutils literal notranslate"><span class="pre">shrinkage</span></code>.</p>
<p>In scikit-learn, this transformation (with a user-defined shrinkage
coefficient) can be directly applied to a pre-computed covariance with
the <a class="reference internal" href="generated/sklearn.covariance.shrunk_covariance.html#sklearn.covariance.shrunk_covariance" title="sklearn.covariance.shrunk_covariance"><code class="xref py py-func docutils literal notranslate"><span class="pre">shrunk_covariance</span></code></a> method. Also, a shrunk estimator of the
covariance can be fitted to data with a <a class="reference internal" href="generated/sklearn.covariance.ShrunkCovariance.html#sklearn.covariance.ShrunkCovariance" title="sklearn.covariance.ShrunkCovariance"><code class="xref py py-class docutils literal notranslate"><span class="pre">ShrunkCovariance</span></code></a> object
and its <a class="reference internal" href="generated/sklearn.covariance.ShrunkCovariance.html#sklearn.covariance.ShrunkCovariance.fit" title="sklearn.covariance.ShrunkCovariance.fit"><code class="xref py py-meth docutils literal notranslate"><span class="pre">ShrunkCovariance.fit</span></code></a> method. Again, results depend on
whether the data are centered, so one may want to use the
<code class="docutils literal notranslate"><span class="pre">assume_centered</span></code> parameter accurately.</p>
<p>Mathematically, this shrinkage consists in reducing the ratio between the
smallest and the largest eigenvalues of the empirical covariance matrix.
It can be done by simply shifting every eigenvalue according to a given
offset, which is equivalent of finding the l2-penalized Maximum
Likelihood Estimator of the covariance matrix. In practice, shrinkage
boils down to a simple a convex transformation : <span class="math notranslate nohighlight">\(\Sigma_{\rm
shrunk} = (1-\alpha)\hat{\Sigma} + \alpha\frac{{\rm
Tr}\hat{\Sigma}}{p}\rm Id\)</span>.</p>
<p>Choosing the amount of shrinkage, <span class="math notranslate nohighlight">\(\alpha\)</span> amounts to setting a
bias/variance trade-off, and is discussed below.</p>
<div class="topic">
<p class="topic-title">Examples:</p>
<ul class="simple">
<li><p>See <a class="reference internal" href="../auto_examples/covariance/plot_covariance_estimation.html#sphx-glr-auto-examples-covariance-plot-covariance-estimation-py"><span class="std std-ref">Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood</span></a> for
an example on how to fit a <a class="reference internal" href="generated/sklearn.covariance.ShrunkCovariance.html#sklearn.covariance.ShrunkCovariance" title="sklearn.covariance.ShrunkCovariance"><code class="xref py py-class docutils literal notranslate"><span class="pre">ShrunkCovariance</span></code></a> object
to data.</p></li>
</ul>
</div>
</div>
<div class="section" id="ledoit-wolf-shrinkage">
<h3>2.6.2.2. Ledoit-Wolf shrinkage<a class="headerlink" href="#ledoit-wolf-shrinkage" title="Permalink to this headline">¶</a></h3>
<p>In their 2004 paper <a class="footnote-reference brackets" href="#id3" id="id2">1</a>, O. Ledoit and M. Wolf propose a formula
to compute the optimal shrinkage coefficient <span class="math notranslate nohighlight">\(\alpha\)</span> that
minimizes the Mean Squared Error between the estimated and the real
covariance matrix.</p>
<p>The Ledoit-Wolf estimator of the covariance matrix can be computed on
a sample with the <a class="reference internal" href="generated/sklearn.covariance.ledoit_wolf.html#sklearn.covariance.ledoit_wolf" title="sklearn.covariance.ledoit_wolf"><code class="xref py py-meth docutils literal notranslate"><span class="pre">ledoit_wolf</span></code></a> function of the
<a class="reference internal" href="classes.html#module-sklearn.covariance" title="sklearn.covariance"><code class="xref py py-mod docutils literal notranslate"><span class="pre">sklearn.covariance</span></code></a> package, or it can be otherwise obtained by
fitting a <a class="reference internal" href="generated/sklearn.covariance.LedoitWolf.html#sklearn.covariance.LedoitWolf" title="sklearn.covariance.LedoitWolf"><code class="xref py py-class docutils literal notranslate"><span class="pre">LedoitWolf</span></code></a> object to the same sample.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p><strong>Case when population covariance matrix is isotropic</strong></p>
<p>It is important to note that when the number of samples is much larger than
the number of features, one would expect that no shrinkage would be
necessary. The intuition behind this is that if the population covariance
is full rank, when the number of sample grows, the sample covariance will
also become positive definite. As a result, no shrinkage would necessary
and the method should automatically do this.</p>
<p>This, however, is not the case in the Ledoit-Wolf procedure when the
population covariance happens to be a multiple of the identity matrix. In
this case, the Ledoit-Wolf shrinkage estimate approaches 1 as the number of
samples increases. This indicates that the optimal estimate of the
covariance matrix in the Ledoit-Wolf sense is multiple of the identity.
Since the population covariance is already a multiple of the identity
matrix, the Ledoit-Wolf solution is indeed a reasonable estimate.</p>
</div>
<div class="topic">
<p class="topic-title">Examples:</p>
<ul class="simple">
<li><p>See <a class="reference internal" href="../auto_examples/covariance/plot_covariance_estimation.html#sphx-glr-auto-examples-covariance-plot-covariance-estimation-py"><span class="std std-ref">Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood</span></a> for
an example on how to fit a <a class="reference internal" href="generated/sklearn.covariance.LedoitWolf.html#sklearn.covariance.LedoitWolf" title="sklearn.covariance.LedoitWolf"><code class="xref py py-class docutils literal notranslate"><span class="pre">LedoitWolf</span></code></a> object to data and
for visualizing the performances of the Ledoit-Wolf estimator in
terms of likelihood.</p></li>
</ul>
</div>
<div class="topic">
<p class="topic-title">References:</p>
<dl class="footnote brackets">
<dt class="label" id="id3"><span class="brackets"><a class="fn-backref" href="#id2">1</a></span></dt>
<dd><p>O. Ledoit and M. Wolf, “A Well-Conditioned Estimator for Large-Dimensional
Covariance Matrices”, Journal of Multivariate Analysis, Volume 88, Issue 2,
February 2004, pages 365-411.</p>
</dd>
</dl>
</div>
</div>
<div class="section" id="oracle-approximating-shrinkage">
<span id="id4"></span><h3>2.6.2.3. Oracle Approximating Shrinkage<a class="headerlink" href="#oracle-approximating-shrinkage" title="Permalink to this headline">¶</a></h3>
<p>Under the assumption that the data are Gaussian distributed, Chen et
al. <a class="footnote-reference brackets" href="#id6" id="id5">2</a> derived a formula aimed at choosing a shrinkage coefficient that
yields a smaller Mean Squared Error than the one given by Ledoit and
Wolf’s formula. The resulting estimator is known as the Oracle
Shrinkage Approximating estimator of the covariance.</p>
<p>The OAS estimator of the covariance matrix can be computed on a sample
with the <a class="reference internal" href="generated/sklearn.covariance.oas.html#sklearn.covariance.oas" title="sklearn.covariance.oas"><code class="xref py py-meth docutils literal notranslate"><span class="pre">oas</span></code></a> function of the <a class="reference internal" href="classes.html#module-sklearn.covariance" title="sklearn.covariance"><code class="xref py py-mod docutils literal notranslate"><span class="pre">sklearn.covariance</span></code></a>
package, or it can be otherwise obtained by fitting an <a class="reference internal" href="generated/sklearn.covariance.OAS.html#sklearn.covariance.OAS" title="sklearn.covariance.OAS"><code class="xref py py-class docutils literal notranslate"><span class="pre">OAS</span></code></a>
object to the same sample.</p>
<div class="figure align-center" id="id13">
<a class="reference external image-reference" href="../auto_examples/covariance/plot_covariance_estimation.html"><img alt="../_images/sphx_glr_plot_covariance_estimation_0011.png" src="../_images/sphx_glr_plot_covariance_estimation_0011.png" style="width: 416.0px; height: 312.0px;"/></a>
<p class="caption"><span class="caption-text">Bias-variance trade-off when setting the shrinkage: comparing the
choices of Ledoit-Wolf and OAS estimators</span><a class="headerlink" href="#id13" title="Permalink to this image">¶</a></p>
</div>
<div class="topic">
<p class="topic-title">References:</p>
<dl class="footnote brackets">
<dt class="label" id="id6"><span class="brackets"><a class="fn-backref" href="#id5">2</a></span></dt>
<dd><p>Chen et al., “Shrinkage Algorithms for MMSE Covariance Estimation”,
IEEE Trans. on Sign. Proc., Volume 58, Issue 10, October 2010.</p>
</dd>
</dl>
</div>
<div class="topic">
<p class="topic-title">Examples:</p>
<ul class="simple">
<li><p>See <a class="reference internal" href="../auto_examples/covariance/plot_covariance_estimation.html#sphx-glr-auto-examples-covariance-plot-covariance-estimation-py"><span class="std std-ref">Shrinkage covariance estimation: LedoitWolf vs OAS and max-likelihood</span></a> for
an example on how to fit an <a class="reference internal" href="generated/sklearn.covariance.OAS.html#sklearn.covariance.OAS" title="sklearn.covariance.OAS"><code class="xref py py-class docutils literal notranslate"><span class="pre">OAS</span></code></a> object
to data.</p></li>
<li><p>See <a class="reference internal" href="../auto_examples/covariance/plot_lw_vs_oas.html#sphx-glr-auto-examples-covariance-plot-lw-vs-oas-py"><span class="std std-ref">Ledoit-Wolf vs OAS estimation</span></a> to visualize the
Mean Squared Error difference between a <a class="reference internal" href="generated/sklearn.covariance.LedoitWolf.html#sklearn.covariance.LedoitWolf" title="sklearn.covariance.LedoitWolf"><code class="xref py py-class docutils literal notranslate"><span class="pre">LedoitWolf</span></code></a> and
an <a class="reference internal" href="generated/sklearn.covariance.OAS.html#sklearn.covariance.OAS" title="sklearn.covariance.OAS"><code class="xref py py-class docutils literal notranslate"><span class="pre">OAS</span></code></a> estimator of the covariance.</p></li>
</ul>
</div>
<div class="figure align-center">
<a class="reference external image-reference" href="../auto_examples/covariance/plot_lw_vs_oas.html"><img alt="../_images/sphx_glr_plot_lw_vs_oas_0011.png" src="../_images/sphx_glr_plot_lw_vs_oas_0011.png" style="width: 480.0px; height: 360.0px;"/></a>
</div>
</div>
</div>
<div class="section" id="sparse-inverse-covariance">
<span id="id7"></span><h2>2.6.3. Sparse inverse covariance<a class="headerlink" href="#sparse-inverse-covariance" title="Permalink to this headline">¶</a></h2>
<p>The matrix inverse of the covariance matrix, often called the precision
matrix, is proportional to the partial correlation matrix. It gives the
partial independence relationship. In other words, if two features are
independent conditionally on the others, the corresponding coefficient in
the precision matrix will be zero. This is why it makes sense to
estimate a sparse precision matrix: the estimation of the covariance
matrix is better conditioned by learning independence relations from
the data. This is known as <em>covariance selection</em>.</p>
<p>In the small-samples situation, in which <code class="docutils literal notranslate"><span class="pre">n_samples</span></code> is on the order
of <code class="docutils literal notranslate"><span class="pre">n_features</span></code> or smaller, sparse inverse covariance estimators tend to work
better than shrunk covariance estimators. However, in the opposite
situation, or for very correlated data, they can be numerically unstable.
In addition, unlike shrinkage estimators, sparse estimators are able to
recover off-diagonal structure.</p>
<p>The <a class="reference internal" href="generated/sklearn.covariance.GraphicalLasso.html#sklearn.covariance.GraphicalLasso" title="sklearn.covariance.GraphicalLasso"><code class="xref py py-class docutils literal notranslate"><span class="pre">GraphicalLasso</span></code></a> estimator uses an l1 penalty to enforce sparsity on
the precision matrix: the higher its <code class="docutils literal notranslate"><span class="pre">alpha</span></code> parameter, the more sparse
the precision matrix. The corresponding <a class="reference internal" href="generated/sklearn.covariance.GraphicalLassoCV.html#sklearn.covariance.GraphicalLassoCV" title="sklearn.covariance.GraphicalLassoCV"><code class="xref py py-class docutils literal notranslate"><span class="pre">GraphicalLassoCV</span></code></a> object uses
cross-validation to automatically set the <code class="docutils literal notranslate"><span class="pre">alpha</span></code> parameter.</p>
<div class="figure align-center" id="id14">
<a class="reference external image-reference" href="../auto_examples/covariance/plot_sparse_cov.html"><img alt="../_images/sphx_glr_plot_sparse_cov_0011.png" src="../_images/sphx_glr_plot_sparse_cov_0011.png" style="width: 600.0px; height: 360.0px;"/></a>
<p class="caption"><span class="caption-text"><em>A comparison of maximum likelihood, shrinkage and sparse estimates of
the covariance and precision matrix in the very small samples
settings.</em></span><a class="headerlink" href="#id14" title="Permalink to this image">¶</a></p>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p><strong>Structure recovery</strong></p>
<p>Recovering a graphical structure from correlations in the data is a
challenging thing. If you are interested in such recovery keep in mind
that:</p>
<ul class="simple">
<li><p>Recovery is easier from a correlation matrix than a covariance
matrix: standardize your observations before running <a class="reference internal" href="generated/sklearn.covariance.GraphicalLasso.html#sklearn.covariance.GraphicalLasso" title="sklearn.covariance.GraphicalLasso"><code class="xref py py-class docutils literal notranslate"><span class="pre">GraphicalLasso</span></code></a></p></li>
<li><p>If the underlying graph has nodes with much more connections than
the average node, the algorithm will miss some of these connections.</p></li>
<li><p>If your number of observations is not large compared to the number
of edges in your underlying graph, you will not recover it.</p></li>
<li><p>Even if you are in favorable recovery conditions, the alpha
parameter chosen by cross-validation (e.g. using the
<a class="reference internal" href="generated/sklearn.covariance.GraphicalLassoCV.html#sklearn.covariance.GraphicalLassoCV" title="sklearn.covariance.GraphicalLassoCV"><code class="xref py py-class docutils literal notranslate"><span class="pre">GraphicalLassoCV</span></code></a> object) will lead to selecting too many edges.
However, the relevant edges will have heavier weights than the
irrelevant ones.</p></li>
</ul>
</div>
<p>The mathematical formulation is the following:</p>
<div class="math notranslate nohighlight">
\[\hat{K} = \mathrm{argmin}_K \big(
            \mathrm{tr} S K - \mathrm{log} \mathrm{det} K
            + \alpha \|K\|_1
            \big)\]</div>
<p>Where <span class="math notranslate nohighlight">\(K\)</span> is the precision matrix to be estimated, and <span class="math notranslate nohighlight">\(S\)</span> is the
sample covariance matrix. <span class="math notranslate nohighlight">\(\|K\|_1\)</span> is the sum of the absolute values of
off-diagonal coefficients of <span class="math notranslate nohighlight">\(K\)</span>. The algorithm employed to solve this
problem is the GLasso algorithm, from the Friedman 2008 Biostatistics
paper. It is the same algorithm as in the R <code class="docutils literal notranslate"><span class="pre">glasso</span></code> package.</p>
<div class="topic">
<p class="topic-title">Examples:</p>
<ul class="simple">
<li><p><a class="reference internal" href="../auto_examples/covariance/plot_sparse_cov.html#sphx-glr-auto-examples-covariance-plot-sparse-cov-py"><span class="std std-ref">Sparse inverse covariance estimation</span></a>: example on synthetic
data showing some recovery of a structure, and comparing to other
covariance estimators.</p></li>
<li><p><a class="reference internal" href="../auto_examples/applications/plot_stock_market.html#sphx-glr-auto-examples-applications-plot-stock-market-py"><span class="std std-ref">Visualizing the stock market structure</span></a>: example on real
stock market data, finding which symbols are most linked.</p></li>
</ul>
</div>
<div class="topic">
<p class="topic-title">References:</p>
<ul class="simple">
<li><p>Friedman et al, <a class="reference external" href="https://biostatistics.oxfordjournals.org/content/9/3/432.short">“Sparse inverse covariance estimation with the
graphical lasso”</a>,
Biostatistics 9, pp 432, 2008</p></li>
</ul>
</div>
</div>
<div class="section" id="robust-covariance-estimation">
<span id="robust-covariance"></span><h2>2.6.4. Robust Covariance Estimation<a class="headerlink" href="#robust-covariance-estimation" title="Permalink to this headline">¶</a></h2>
<p>Real data sets are often subject to measurement or recording
errors. Regular but uncommon observations may also appear for a variety
of reasons. Observations which are very uncommon are called
outliers.
The empirical covariance estimator and the shrunk covariance
estimators presented above are very sensitive to the presence of
outliers in the data. Therefore, one should use robust
covariance estimators to estimate the covariance of its real data
sets. Alternatively, robust covariance estimators can be used to
perform outlier detection and discard/downweight some observations
according to further processing of the data.</p>
<p>The <code class="docutils literal notranslate"><span class="pre">sklearn.covariance</span></code> package implements a robust estimator of covariance,
the Minimum Covariance Determinant <a class="footnote-reference brackets" href="#id11" id="id8">3</a>.</p>
<div class="section" id="minimum-covariance-determinant">
<h3>2.6.4.1. Minimum Covariance Determinant<a class="headerlink" href="#minimum-covariance-determinant" title="Permalink to this headline">¶</a></h3>
<p>The Minimum Covariance Determinant estimator is a robust estimator of
a data set’s covariance introduced by P.J. Rousseeuw in <a class="footnote-reference brackets" href="#id11" id="id9">3</a>.  The idea
is to find a given proportion (h) of “good” observations which are not
outliers and compute their empirical covariance matrix.  This
empirical covariance matrix is then rescaled to compensate the
performed selection of observations (“consistency step”).  Having
computed the Minimum Covariance Determinant estimator, one can give
weights to observations according to their Mahalanobis distance,
leading to a reweighted estimate of the covariance matrix of the data
set (“reweighting step”).</p>
<p>Rousseeuw and Van Driessen <a class="footnote-reference brackets" href="#id12" id="id10">4</a> developed the FastMCD algorithm in order
to compute the Minimum Covariance Determinant. This algorithm is used
in scikit-learn when fitting an MCD object to data. The FastMCD
algorithm also computes a robust estimate of the data set location at
the same time.</p>
<p>Raw estimates can be accessed as <code class="docutils literal notranslate"><span class="pre">raw_location_</span></code> and <code class="docutils literal notranslate"><span class="pre">raw_covariance_</span></code>
attributes of a <a class="reference internal" href="generated/sklearn.covariance.MinCovDet.html#sklearn.covariance.MinCovDet" title="sklearn.covariance.MinCovDet"><code class="xref py py-class docutils literal notranslate"><span class="pre">MinCovDet</span></code></a> robust covariance estimator object.</p>
<div class="topic">
<p class="topic-title">References:</p>
<dl class="footnote brackets">
<dt class="label" id="id11"><span class="brackets">3</span><span class="fn-backref">(<a href="#id8">1</a>,<a href="#id9">2</a>)</span></dt>
<dd><p>P. J. Rousseeuw. Least median of squares regression.
J. Am Stat Ass, 79:871, 1984.</p>
</dd>
<dt class="label" id="id12"><span class="brackets"><a class="fn-backref" href="#id10">4</a></span></dt>
<dd><p>A Fast Algorithm for the Minimum Covariance Determinant Estimator,
1999, American Statistical Association and the American Society
for Quality, TECHNOMETRICS.</p>
</dd>
</dl>
</div>
<div class="topic">
<p class="topic-title">Examples:</p>
<ul class="simple">
<li><p>See <a class="reference internal" href="../auto_examples/covariance/plot_robust_vs_empirical_covariance.html#sphx-glr-auto-examples-covariance-plot-robust-vs-empirical-covariance-py"><span class="std std-ref">Robust vs Empirical covariance estimate</span></a> for
an example on how to fit a <a class="reference internal" href="generated/sklearn.covariance.MinCovDet.html#sklearn.covariance.MinCovDet" title="sklearn.covariance.MinCovDet"><code class="xref py py-class docutils literal notranslate"><span class="pre">MinCovDet</span></code></a> object to data and see how
the estimate remains accurate despite the presence of outliers.</p></li>
<li><p>See <a class="reference internal" href="../auto_examples/covariance/plot_mahalanobis_distances.html#sphx-glr-auto-examples-covariance-plot-mahalanobis-distances-py"><span class="std std-ref">Robust covariance estimation and Mahalanobis distances relevance</span></a> to
visualize the difference between <a class="reference internal" href="generated/sklearn.covariance.EmpiricalCovariance.html#sklearn.covariance.EmpiricalCovariance" title="sklearn.covariance.EmpiricalCovariance"><code class="xref py py-class docutils literal notranslate"><span class="pre">EmpiricalCovariance</span></code></a> and
<a class="reference internal" href="generated/sklearn.covariance.MinCovDet.html#sklearn.covariance.MinCovDet" title="sklearn.covariance.MinCovDet"><code class="xref py py-class docutils literal notranslate"><span class="pre">MinCovDet</span></code></a> covariance estimators in terms of Mahalanobis distance
(so we get a better estimate of the precision matrix too).</p></li>
</ul>
</div>
<hr class="docutils"/>
<table class="docutils align-default">
<colgroup>
<col style="width: 50%"/>
<col style="width: 50%"/>
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>Influence of outliers on location and covariance estimates</p></th>
<th class="head"><p>Separating inliers from outliers using a Mahalanobis distance</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><a class="reference external" href="../auto_examples/covariance/plot_robust_vs_empirical_covariance.html"><img alt="robust_vs_emp" src="../_images/sphx_glr_plot_robust_vs_empirical_covariance_0011.png" style="width: 313.6px; height: 235.2px;"/></a></p></td>
<td><p><a class="reference external" href="../auto_examples/covariance/plot_mahalanobis_distances.html"><img alt="mahalanobis" src="../_images/sphx_glr_plot_mahalanobis_distances_0011.png" style="width: 313.6px; height: 235.2px;"/></a></p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>