<div class="section" id="biclustering">
<span id="id1"></span><h1>2.4. Biclustering<a class="headerlink" href="#biclustering" title="Permalink to this headline">¶</a></h1>
<p>Biclustering can be performed with the module
<code class="xref py py-mod docutils literal notranslate"><span class="pre">sklearn.cluster.bicluster</span></code>. Biclustering algorithms simultaneously
cluster rows and columns of a data matrix. These clusters of rows and
columns are known as biclusters. Each determines a submatrix of the
original data matrix with some desired properties.</p>
<p>For instance, given a matrix of shape <code class="docutils literal notranslate"><span class="pre">(10,</span> <span class="pre">10)</span></code>, one possible bicluster
with three rows and two columns induces a submatrix of shape <code class="docutils literal notranslate"><span class="pre">(3,</span> <span class="pre">2)</span></code>:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="gp">&gt;&gt;&gt; </span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">rows</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])[:,</span> <span class="n">np</span><span class="o">.</span><span class="n">newaxis</span><span class="p">]</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">columns</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">])</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">data</span><span class="p">[</span><span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">]</span>
<span class="go">array([[ 1,  2],</span>
<span class="go">       [21, 22],</span>
<span class="go">       [31, 32]])</span>
</pre></div>
</div>
<p>For visualization purposes, given a bicluster, the rows and columns of
the data matrix may be rearranged to make the bicluster contiguous.</p>
<p>Algorithms differ in how they define biclusters. Some of the
common types include:</p>
<ul class="simple">
<li><p>constant values, constant rows, or constant columns</p></li>
<li><p>unusually high or low values</p></li>
<li><p>submatrices with low variance</p></li>
<li><p>correlated rows or columns</p></li>
</ul>
<p>Algorithms also differ in how rows and columns may be assigned to
biclusters, which leads to different bicluster structures. Block
diagonal or checkerboard structures occur when rows and columns are
divided into partitions.</p>
<p>If each row and each column belongs to exactly one bicluster, then
rearranging the rows and columns of the data matrix reveals the
biclusters on the diagonal. Here is an example of this structure
where biclusters have higher average values than the other rows and
columns:</p>
<div class="figure align-center" id="id5">
<a class="reference external image-reference" href="../auto_examples/bicluster/images/sphx_glr_plot_spectral_coclustering_003.png"><img alt="../_images/sphx_glr_plot_spectral_coclustering_0031.png" src="../_images/sphx_glr_plot_spectral_coclustering_0031.png" style="width: 240.0px; height: 240.0px;"/></a>
<p class="caption"><span class="caption-text">An example of biclusters formed by partitioning rows and columns.</span><a class="headerlink" href="#id5" title="Permalink to this image">¶</a></p>
</div>
<p>In the checkerboard case, each row belongs to all column clusters, and
each column belongs to all row clusters. Here is an example of this
structure where the variance of the values within each bicluster is
small:</p>
<div class="figure align-center" id="id6">
<a class="reference external image-reference" href="../auto_examples/bicluster/images/sphx_glr_plot_spectral_biclustering_003.png"><img alt="../_images/sphx_glr_plot_spectral_biclustering_0031.png" src="../_images/sphx_glr_plot_spectral_biclustering_0031.png" style="width: 240.0px; height: 240.0px;"/></a>
<p class="caption"><span class="caption-text">An example of checkerboard biclusters.</span><a class="headerlink" href="#id6" title="Permalink to this image">¶</a></p>
</div>
<p>After fitting a model, row and column cluster membership can be found
in the <code class="docutils literal notranslate"><span class="pre">rows_</span></code> and <code class="docutils literal notranslate"><span class="pre">columns_</span></code> attributes. <code class="docutils literal notranslate"><span class="pre">rows_[i]</span></code> is a binary vector
with nonzero entries corresponding to rows that belong to bicluster
<code class="docutils literal notranslate"><span class="pre">i</span></code>. Similarly, <code class="docutils literal notranslate"><span class="pre">columns_[i]</span></code> indicates which columns belong to
bicluster <code class="docutils literal notranslate"><span class="pre">i</span></code>.</p>
<p>Some models also have <code class="docutils literal notranslate"><span class="pre">row_labels_</span></code> and <code class="docutils literal notranslate"><span class="pre">column_labels_</span></code> attributes.
These models partition the rows and columns, such as in the block
diagonal and checkerboard bicluster structures.</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>Biclustering has many other names in different fields including
co-clustering, two-mode clustering, two-way clustering, block
clustering, coupled two-way clustering, etc. The names of some
algorithms, such as the Spectral Co-Clustering algorithm, reflect
these alternate names.</p>
</div>
<div class="section" id="spectral-co-clustering">
<span id="spectral-coclustering"></span><h2>2.4.1. Spectral Co-Clustering<a class="headerlink" href="#spectral-co-clustering" title="Permalink to this headline">¶</a></h2>
<p>The <code class="xref py py-class docutils literal notranslate"><span class="pre">SpectralCoclustering</span></code> algorithm finds biclusters with
values higher than those in the corresponding other rows and columns.
Each row and each column belongs to exactly one bicluster, so
rearranging the rows and columns to make partitions contiguous reveals
these high values along the diagonal:</p>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The algorithm treats the input data matrix as a bipartite graph: the
rows and columns of the matrix correspond to the two sets of vertices,
and each entry corresponds to an edge between a row and a column. The
algorithm approximates the normalized cut of this graph to find heavy
subgraphs.</p>
</div>
<div class="section" id="mathematical-formulation">
<h3>2.4.1.1. Mathematical formulation<a class="headerlink" href="#mathematical-formulation" title="Permalink to this headline">¶</a></h3>
<p>An approximate solution to the optimal normalized cut may be found via
the generalized eigenvalue decomposition of the Laplacian of the
graph. Usually this would mean working directly with the Laplacian
matrix. If the original data matrix <span class="math notranslate nohighlight">\(A\)</span> has shape <span class="math notranslate nohighlight">\(m
\times n\)</span>, the Laplacian matrix for the corresponding bipartite graph
has shape <span class="math notranslate nohighlight">\((m + n) \times (m + n)\)</span>. However, in this case it is
possible to work directly with <span class="math notranslate nohighlight">\(A\)</span>, which is smaller and more
efficient.</p>
<p>The input matrix <span class="math notranslate nohighlight">\(A\)</span> is preprocessed as follows:</p>
<div class="math notranslate nohighlight">
\[A_n = R^{-1/2} A C^{-1/2}\]</div>
<p>Where <span class="math notranslate nohighlight">\(R\)</span> is the diagonal matrix with entry <span class="math notranslate nohighlight">\(i\)</span> equal to
<span class="math notranslate nohighlight">\(\sum_{j} A_{ij}\)</span> and <span class="math notranslate nohighlight">\(C\)</span> is the diagonal matrix with
entry <span class="math notranslate nohighlight">\(j\)</span> equal to <span class="math notranslate nohighlight">\(\sum_{i} A_{ij}\)</span>.</p>
<p>The singular value decomposition, <span class="math notranslate nohighlight">\(A_n = U \Sigma V^\top\)</span>,
provides the partitions of the rows and columns of <span class="math notranslate nohighlight">\(A\)</span>. A subset
of the left singular vectors gives the row partitions, and a subset
of the right singular vectors gives the column partitions.</p>
<p>The <span class="math notranslate nohighlight">\(\ell = \lceil \log_2 k \rceil\)</span> singular vectors, starting
from the second, provide the desired partitioning information. They
are used to form the matrix <span class="math notranslate nohighlight">\(Z\)</span>:</p>
<div class="math notranslate nohighlight">
\[\begin{split}Z = \begin{bmatrix} R^{-1/2} U \\\\
                    C^{-1/2} V
      \end{bmatrix}\end{split}\]</div>
<p>where the columns of <span class="math notranslate nohighlight">\(U\)</span> are <span class="math notranslate nohighlight">\(u_2, \dots, u_{\ell +
1}\)</span>, and similarly for <span class="math notranslate nohighlight">\(V\)</span>.</p>
<p>Then the rows of <span class="math notranslate nohighlight">\(Z\)</span> are clustered using <a class="reference internal" href="clustering.html#k-means"><span class="std std-ref">k-means</span></a>. The first <code class="docutils literal notranslate"><span class="pre">n_rows</span></code> labels provide the row partitioning,
and the remaining <code class="docutils literal notranslate"><span class="pre">n_columns</span></code> labels provide the column partitioning.</p>
<div class="topic">
<p class="topic-title">Examples:</p>
<ul class="simple">
<li><p><a class="reference internal" href="../auto_examples/bicluster/plot_spectral_coclustering.html#sphx-glr-auto-examples-bicluster-plot-spectral-coclustering-py"><span class="std std-ref">A demo of the Spectral Co-Clustering algorithm</span></a>: A simple example
showing how to generate a data matrix with biclusters and apply
this method to it.</p></li>
<li><p><a class="reference internal" href="../auto_examples/bicluster/plot_bicluster_newsgroups.html#sphx-glr-auto-examples-bicluster-plot-bicluster-newsgroups-py"><span class="std std-ref">Biclustering documents with the Spectral Co-clustering algorithm</span></a>: An example of finding
biclusters in the twenty newsgroup dataset.</p></li>
</ul>
</div>
<div class="topic">
<p class="topic-title">References:</p>
<ul class="simple">
<li><p>Dhillon, Inderjit S, 2001. <a class="reference external" href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.140.3011">Co-clustering documents and words using
bipartite spectral graph partitioning</a>.</p></li>
</ul>
</div>
</div>
</div>
<div class="section" id="spectral-biclustering">
<span id="id2"></span><h2>2.4.2. Spectral Biclustering<a class="headerlink" href="#spectral-biclustering" title="Permalink to this headline">¶</a></h2>
<p>The <code class="xref py py-class docutils literal notranslate"><span class="pre">SpectralBiclustering</span></code> algorithm assumes that the input
data matrix has a hidden checkerboard structure. The rows and columns
of a matrix with this structure may be partitioned so that the entries
of any bicluster in the Cartesian product of row clusters and column
clusters are approximately constant. For instance, if there are two
row partitions and three column partitions, each row will belong to
three biclusters, and each column will belong to two biclusters.</p>
<p>The algorithm partitions the rows and columns of a matrix so that a
corresponding blockwise-constant checkerboard matrix provides a good
approximation to the original matrix.</p>
<div class="section" id="id3">
<h3>2.4.2.1. Mathematical formulation<a class="headerlink" href="#id3" title="Permalink to this headline">¶</a></h3>
<p>The input matrix <span class="math notranslate nohighlight">\(A\)</span> is first normalized to make the
checkerboard pattern more obvious. There are three possible methods:</p>
<ol class="arabic simple">
<li><p><em>Independent row and column normalization</em>, as in Spectral
Co-Clustering. This method makes the rows sum to a constant and the
columns sum to a different constant.</p></li>
<li><p><strong>Bistochastization</strong>: repeated row and column normalization until
convergence. This method makes both rows and columns sum to the
same constant.</p></li>
<li><p><strong>Log normalization</strong>: the log of the data matrix is computed: <span class="math notranslate nohighlight">\(L =
\log A\)</span>. Then the column mean <span class="math notranslate nohighlight">\(\overline{L_{i \cdot}}\)</span>, row mean
<span class="math notranslate nohighlight">\(\overline{L_{\cdot j}}\)</span>, and overall mean <span class="math notranslate nohighlight">\(\overline{L_{\cdot
\cdot}}\)</span> of <span class="math notranslate nohighlight">\(L\)</span> are computed. The final matrix is computed
according to the formula</p></li>
</ol>
<div class="math notranslate nohighlight">
\[K_{ij} = L_{ij} - \overline{L_{i \cdot}} - \overline{L_{\cdot
j}} + \overline{L_{\cdot \cdot}}\]</div>
<p>After normalizing, the first few singular vectors are computed, just
as in the Spectral Co-Clustering algorithm.</p>
<p>If log normalization was used, all the singular vectors are
meaningful. However, if independent normalization or bistochastization
were used, the first singular vectors, <span class="math notranslate nohighlight">\(u_1\)</span> and <span class="math notranslate nohighlight">\(v_1\)</span>.
are discarded. From now on, the “first” singular vectors refers to
<span class="math notranslate nohighlight">\(u_2 \dots u_{p+1}\)</span> and <span class="math notranslate nohighlight">\(v_2 \dots v_{p+1}\)</span> except in the
case of log normalization.</p>
<p>Given these singular vectors, they are ranked according to which can
be best approximated by a piecewise-constant vector. The
approximations for each vector are found using one-dimensional k-means
and scored using the Euclidean distance. Some subset of the best left
and right singular vector are selected. Next, the data is projected to
this best subset of singular vectors and clustered.</p>
<p>For instance, if <span class="math notranslate nohighlight">\(p\)</span> singular vectors were calculated, the
<span class="math notranslate nohighlight">\(q\)</span> best are found as described, where <span class="math notranslate nohighlight">\(q&lt;p\)</span>. Let
<span class="math notranslate nohighlight">\(U\)</span> be the matrix with columns the <span class="math notranslate nohighlight">\(q\)</span> best left singular
vectors, and similarly <span class="math notranslate nohighlight">\(V\)</span> for the right. To partition the rows,
the rows of <span class="math notranslate nohighlight">\(A\)</span> are projected to a <span class="math notranslate nohighlight">\(q\)</span> dimensional space:
<span class="math notranslate nohighlight">\(A * V\)</span>. Treating the <span class="math notranslate nohighlight">\(m\)</span> rows of this <span class="math notranslate nohighlight">\(m \times q\)</span>
matrix as samples and clustering using k-means yields the row labels.
Similarly, projecting the columns to <span class="math notranslate nohighlight">\(A^{\top} * U\)</span> and
clustering this <span class="math notranslate nohighlight">\(n \times q\)</span> matrix yields the column labels.</p>
<div class="topic">
<p class="topic-title">Examples:</p>
<ul class="simple">
<li><p><a class="reference internal" href="../auto_examples/bicluster/plot_spectral_biclustering.html#sphx-glr-auto-examples-bicluster-plot-spectral-biclustering-py"><span class="std std-ref">A demo of the Spectral Biclustering algorithm</span></a>: a simple example
showing how to generate a checkerboard matrix and bicluster it.</p></li>
</ul>
</div>
<div class="topic">
<p class="topic-title">References:</p>
<ul class="simple">
<li><p>Kluger, Yuval, et. al., 2003. <a class="reference external" href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.135.1608">Spectral biclustering of microarray
data: coclustering genes and conditions</a>.</p></li>
</ul>
</div>
</div>
</div>
<div class="section" id="biclustering-evaluation">
<span id="id4"></span><h2>2.4.3. Biclustering evaluation<a class="headerlink" href="#biclustering-evaluation" title="Permalink to this headline">¶</a></h2>
<p>There are two ways of evaluating a biclustering result: internal and
external. Internal measures, such as cluster stability, rely only on
the data and the result themselves. Currently there are no internal
bicluster measures in scikit-learn. External measures refer to an
external source of information, such as the true solution. When
working with real data the true solution is usually unknown, but
biclustering artificial data may be useful for evaluating algorithms
precisely because the true solution is known.</p>
<p>To compare a set of found biclusters to the set of true biclusters,
two similarity measures are needed: a similarity measure for
individual biclusters, and a way to combine these individual
similarities into an overall score.</p>
<p>To compare individual biclusters, several measures have been used. For
now, only the Jaccard index is implemented:</p>
<div class="math notranslate nohighlight">
\[J(A, B) = \frac{|A \cap B|}{|A| + |B| - |A \cap B|}\]</div>
<p>where <span class="math notranslate nohighlight">\(A\)</span> and <span class="math notranslate nohighlight">\(B\)</span> are biclusters, <span class="math notranslate nohighlight">\(|A \cap B|\)</span> is
the number of elements in their intersection. The Jaccard index
achieves its minimum of 0 when the biclusters to not overlap at all
and its maximum of 1 when they are identical.</p>
<p>Several methods have been developed to compare two sets of biclusters.
For now, only <a class="reference internal" href="generated/sklearn.metrics.consensus_score.html#sklearn.metrics.consensus_score" title="sklearn.metrics.consensus_score"><code class="xref py py-func docutils literal notranslate"><span class="pre">consensus_score</span></code></a> (Hochreiter et. al., 2010) is
available:</p>
<ol class="arabic simple">
<li><p>Compute bicluster similarities for pairs of biclusters, one in each
set, using the Jaccard index or a similar measure.</p></li>
<li><p>Assign biclusters from one set to another in a one-to-one fashion
to maximize the sum of their similarities. This step is performed
using the Hungarian algorithm.</p></li>
<li><p>The final sum of similarities is divided by the size of the larger
set.</p></li>
</ol>
<p>The minimum consensus score, 0, occurs when all pairs of biclusters
are totally dissimilar. The maximum score, 1, occurs when both sets
are identical.</p>
<div class="topic">
<p class="topic-title">References:</p>
<ul class="simple">
<li><p>Hochreiter, Bodenhofer, et. al., 2010. <a class="reference external" href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2881408/">FABIA: factor analysis
for bicluster acquisition</a>.</p></li>
</ul>
</div>
</div>
</div>