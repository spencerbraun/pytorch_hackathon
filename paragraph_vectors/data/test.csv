text
"sklearn_1_10_decision_trees 1.10. Decision Trees modules/tree.html  1.10.3. Multi-output problems  A multi-output problem is a supervised learning problem with several outputs to predict, that is when Y is a 2d array of size . When there is no correlation between the outputs, a very simple way to solve this kind of problem is to build n independent models, i.e. one for each output, and then to use those models to independently predict each one of the n outputs. However, because it is likely that the output values related to the same input are themselves correlated, an often better way is to build a single model capable of predicting simultaneously all n outputs. First, it requires lower training time since only a single estimator is built. Second, the generalization accuracy of the resulting estimator may often be increased. With regard to decision trees, this strategy can readily be used to support multi-output problems. This requires the following changes: Store n output values in leaves, instead of 1; Use splitting criteria that compute the average reduction across all n outputs. This module offers support for multi-output problems by implementing this strategy in both DecisionTreeClassifier and DecisionTreeRegressor . If a decision tree is fit on an output array Y of size then the resulting estimator will: Output n_output values upon ; Output a list of n_output arrays of class probabilities upon . The use of multi-output trees for regression is demonstrated in Multi-output Decision Tree Regression . In this example, the input X is a single real value and the outputs Y are the sine and cosine of X. The use of multi-output trees for classification is demonstrated in Face completion with a multi-output estimators . In this example, the inputs X are the pixels of the upper half of faces and the outputs Y are the pixels of the lower half of those faces. Examples: Multi-output Decision Tree Regression Face completion with a multi-output estimators References: M. Dumont et al, Fast multi-class image annotation with random subwindows and multiple output randomized trees , International Conference on Computer Vision Theory and Applications 2009 "
"sklearn_1_10_decision_trees 1.10. Decision Trees modules/tree.html  1.10.4. Complexity  In general, the run time cost to construct a balanced binary tree is and query time . Although the tree construction algorithm attempts to generate balanced trees, they will not always be balanced. Assuming that the subtrees remain approximately balanced, the cost at each node consists of searching through to find the feature that offers the largest reduction in entropy. This has a cost of at each node, leading to a total cost over the entire trees (by summing the cost at each node) of . "
"sklearn_1_10_decision_trees 1.10. Decision Trees modules/tree.html  1.10.2. Regression  Decision trees can also be applied to regression problems, using the DecisionTreeRegressor class. As in the classification setting, the fit method will take as argument arrays X and y, only that in this case y is expected to have floating point values instead of integer values: Examples: Decision Tree Regression "
"sklearn_1_10_decision_trees 1.10. Decision Trees modules/tree.html  1.10.6. Tree algorithms: ID3, C4.5, C5.0 and CART  What are all the various decision tree algorithms and how do they differ from each other? Which one is implemented in scikit-learn? ID3 (Iterative Dichotomiser 3) was developed in 1986 by Ross Quinlan. The algorithm creates a multiway tree, finding for each node (i.e. in a greedy manner) the categorical feature that will yield the largest information gain for categorical targets. Trees are grown to their maximum size and then a pruning step is usually applied to improve the ability of the tree to generalise to unseen data. C4.5 is the successor to ID3 and removed the restriction that features must be categorical by dynamically defining a discrete attribute (based on numerical variables) that partitions the continuous attribute value into a discrete set of intervals. C4.5 converts the trained trees (i.e. the output of the ID3 algorithm) into sets of if-then rules. These accuracy of each rule is then evaluated to determine the order in which they should be applied. Pruning is done by removing a rule’s precondition if the accuracy of the rule improves without it. C5.0 is Quinlan’s latest version release under a proprietary license. It uses less memory and builds smaller rulesets than C4.5 while being more accurate. CART (Classification and Regression Trees) is very similar to C4.5, but it differs in that it supports numerical target variables (regression) and does not compute rule sets. CART constructs binary trees using the feature and threshold that yield the largest information gain at each node. scikit-learn uses an optimised version of the CART algorithm; however, scikit-learn implementation does not support categorical variables for now. "
"sklearn_1_10_decision_trees 1.10. Decision Trees modules/tree.html  1.10.5. Tips on practical use  Decision trees tend to overfit on data with a large number of features. Getting the right ratio of samples to number of features is important, since a tree with few samples in high dimensional space is very likely to overfit. Consider performing dimensionality reduction ( PCA , ICA , or Feature selection ) beforehand to give your tree a better chance of finding features that are discriminative. Understanding the decision tree structure will help in gaining more insights about how the decision tree makes predictions, which is important for understanding the important features in the data. Visualise your tree as you are training by using the function. Use as an initial tree depth to get a feel for how the tree is fitting to your data, and then increase the depth. Remember that the number of samples required to populate the tree doubles for each additional level the tree grows to. Use to control the size of the tree to prevent overfitting. Use or to ensure that multiple samples inform every decision in the tree, by controlling which splits will be considered. A very small number will usually mean the tree will overfit, whereas a large number will prevent the tree from learning the data. Try as an initial value. If the sample size varies greatly, a float number can be used as percentage in these two parameters. While can create arbitrarily small leaves, guarantees that each leaf has a minimum size, avoiding low-variance, over-fit leaf nodes in regression problems. For classification with few classes, is often the best choice. Balance your dataset before training to prevent the tree from being biased toward the classes that are dominant. Class balancing can be done by sampling an equal number of samples from each class, or preferably by normalizing the sum of the sample weights ( ) for each class to the same value. Also note that weight-based pre-pruning criteria, such as , will then be less biased toward dominant classes than criteria that are not aware of the sample weights, like . If the samples are weighted, it will be easier to optimize the tree structure using weight-based pre-pruning criterion such as , which ensure that leaf nodes contain at least a fraction of the overall sum of the sample weights. All decision trees use arrays internally. If training data is not in this format, a copy of the dataset will be made. If the input matrix X is very sparse, it is recommended to convert to sparse before calling fit and sparse before calling predict. Training time can be orders of magnitude faster for a sparse matrix input compared to a dense matrix when features have zero values in most of the samples. "
"sklearn_1_10_decision_trees 1.10. Decision Trees modules/tree.html  1.10.1. Classification  DecisionTreeClassifier is a class capable of performing multi-class classification on a dataset. As with other classifiers, DecisionTreeClassifier takes as input two arrays: an array X, sparse or dense, of size holding the training samples, and an array Y of integer values, size , holding the class labels for the training samples: After being fitted, the model can then be used to predict the class of samples: Alternatively, the probability of each class can be predicted, which is the fraction of training samples of the same class in a leaf: DecisionTreeClassifier is capable of both binary (where the labels are [-1, 1]) classification and multiclass (where the labels are [0, …, K-1]) classification. Using the Iris dataset, we can construct a tree as follows: Once trained, you can plot the tree with the plot_tree function: We can also export the tree in Graphviz format using the export_graphviz exporter. If you use the conda package manager, the graphviz binaries and the python package can be installed with . Alternatively binaries for graphviz can be downloaded from the graphviz project homepage, and the Python wrapper installed from pypi with . Below is an example graphviz export of the above tree trained on the entire iris dataset; the results are saved in an output file : The export_graphviz exporter also supports a variety of aesthetic options, including coloring nodes by their class (or value for regression) and using explicit variable and class names if desired. Jupyter notebooks also render these plots inline automatically: Alternatively, the tree can also be exported in textual format with the function export_text . This method doesn’t require the installation of external libraries and is more compact: Examples: Plot the decision surface of a decision tree on the iris dataset Understanding the decision tree structure "
"sklearn_1_10_decision_trees 1.10. Decision Trees modules/tree.html  1.10.8. Minimal Cost-Complexity Pruning  Minimal cost-complexity pruning is an algorithm used to prune a tree to avoid over-fitting, described in Chapter 3 of [BRE] . This algorithm is parameterized by known as the complexity parameter. The complexity parameter is used to define the cost-complexity measure, of a given tree : \[R_\alpha(T)  R(T) + \alpha|T|\] where is the number of terminal nodes in and is traditionally defined as the total misclassification rate of the terminal nodes. Alternatively, scikit-learn uses the total sample weighted impurity of the terminal nodes for . As shown above, the impurity of a node depends on the criterion. Minimal cost-complexity pruning finds the subtree of that minimizes . The cost complexity measure of a single node is . The branch, , is defined to be a tree where node is its root. In general, the impurity of a node is greater than the sum of impurities of its terminal nodes, . However, the cost complexity measure of a node, , and its branch, , can be equal depending on . We define the effective of a node to be the value where they are equal, or . A non-terminal node with the smallest value of is the weakest link and will be pruned. This process stops when the pruned tree’s minimal is greater than the parameter. Examples: Post pruning decision trees with cost complexity pruning References: BRE L. Breiman, J. Friedman, R. Olshen, and C. Stone. Classification and Regression Trees. Wadsworth, Belmont, CA, 1984. https://en.wikipedia.org/wiki/Decision_tree_learning https://en.wikipedia.org/wiki/Predictive_analytics J.R. Quinlan. C4. 5: programs for machine learning. Morgan Kaufmann, 1993. T. Hastie, R. Tibshirani and J. Friedman. Elements of Statistical Learning, Springer, 2009. "
"sklearn_1_10_decision_trees 1.10. Decision Trees modules/tree.html  1.10.7. Mathematical formulation  Given training vectors , i1,…, l and a label vector , a decision tree recursively partitions the space such that the samples with the same labels are grouped together. Let the data at node be represented by . For each candidate split consisting of a feature and threshold , partition the data into and subsets \[ \begin{align}\begin{aligned}Q_{left}(\theta)  {(x, y) | x_j < t_m}\\Q_{right}(\theta)  Q \setminus Q_{left}(\theta)\end{aligned}\end{align} \] The impurity at is computed using an impurity function , the choice of which depends on the task being solved (classification or regression) \[G(Q, \theta)  \frac{n_{left}}{N_m} H(Q_{left}(\theta)) + \frac{n_{right}}{N_m} H(Q_{right}(\theta))\] Select the parameters that minimises the impurity \[\theta^*  \operatorname{argmin}_\theta G(Q, \theta)\] Recurse for subsets and until the maximum allowable depth is reached, or . 1.10.7.1. Classification criteria  If a target is a classification outcome taking on values 0,1,…,K-1, for node , representing a region with observations, let \[p_{mk}  1/ N_m \sum_{x_i \in R_m} I(y_i  k)\] be the proportion of class k observations in node Common measures of impurity are Gini \[H(X_m)  \sum_k p_{mk} (1 - p_{mk})\] Entropy \[H(X_m)  - \sum_k p_{mk} \log(p_{mk})\] and Misclassification \[H(X_m)  1 - \max(p_{mk})\] where is the training data in node 1.10.7.2. Regression criteria  If the target is a continuous value, then for node , representing a region with observations, common criteria to minimise as for determining locations for future splits are Mean Squared Error, which minimizes the L2 error using mean values at terminal nodes, and Mean Absolute Error, which minimizes the L1 error using median values at terminal nodes. Mean Squared Error: \[ \begin{align}\begin{aligned}\bar{y}_m  \frac{1}{N_m} \sum_{i \in N_m} y_i\\H(X_m)  \frac{1}{N_m} \sum_{i \in N_m} (y_i - \bar{y}_m)^2\end{aligned}\end{align} \] Mean Absolute Error: \[ \begin{align}\begin{aligned}median(y)_m  \underset{i \in N_m}{\mathrm{median}}(y_i)\\H(X_m)  \frac{1}{N_m} \sum_{i \in N_m} |y_i - median(y)_m|\end{aligned}\end{align} \] where is the training data in node "