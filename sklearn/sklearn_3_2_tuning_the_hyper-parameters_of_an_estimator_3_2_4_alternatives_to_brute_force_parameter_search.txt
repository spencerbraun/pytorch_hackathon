sklearn_3_2_tuning_the_hyper-parameters_of_an_estimator
3.2. Tuning the hyper-parameters of an estimator
modules/grid_search.html
 3.2.4. Alternatives to brute force parameter search  3.2.4.1. Model specific cross-validation  Some models can fit data for a range of values of some parameter almost as efficiently as fitting the estimator for a single value of the parameter. This feature can be leveraged to perform a more efficient cross-validation used for model selection of this parameter. The most common parameter amenable to this strategy is the parameter encoding the strength of the regularizer. In this case we say that we compute the regularization path of the estimator. Here is the list of such models: linear_model.ElasticNetCV (*[, l1_ratio, …]) Elastic Net model with iterative fitting along a regularization path. linear_model.LarsCV (*[, fit_intercept, …]) Cross-validated Least Angle Regression model. linear_model.LassoCV (*[, eps, n_alphas, …]) Lasso linear model with iterative fitting along a regularization path. linear_model.LassoLarsCV (*[, fit_intercept, …]) Cross-validated Lasso, using the LARS algorithm. linear_model.LogisticRegressionCV (*[, Cs, …]) Logistic Regression CV (aka logit, MaxEnt) classifier. linear_model.MultiTaskElasticNetCV (*[, …]) Multi-task L1/L2 ElasticNet with built-in cross-validation. linear_model.MultiTaskLassoCV (*[, eps, …]) Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer. linear_model.OrthogonalMatchingPursuitCV (*) Cross-validated Orthogonal Matching Pursuit model (OMP). linear_model.RidgeCV ([alphas, …]) Ridge regression with built-in cross-validation. linear_model.RidgeClassifierCV ([alphas, …]) Ridge classifier with built-in cross-validation. 3.2.4.2. Information Criterion  Some models can offer an information-theoretic closed-form formula of the optimal estimate of the regularization parameter by computing a single regularization path (instead of several when using cross-validation). Here is the list of models benefiting from the Akaike Information Criterion (AIC) or the Bayesian Information Criterion (BIC) for automated model selection: linear_model.LassoLarsIC ([criterion, …]) Lasso model fit with Lars using BIC or AIC for model selection 3.2.4.3. Out of Bag Estimates  When using ensemble methods base upon bagging, i.e. generating new training sets using sampling with replacement, part of the training set remains unused. For each classifier in the ensemble, a different part of the training set is left out. This left out portion can be used to estimate the generalization error without having to rely on a separate validation set. This estimate comes “for free” as no additional data is needed and can be used for model selection. This is currently implemented in the following classes: ensemble.RandomForestClassifier ([…]) A random forest classifier. ensemble.RandomForestRegressor ([…]) A random forest regressor. ensemble.ExtraTreesClassifier ([…]) An extra-trees classifier. ensemble.ExtraTreesRegressor ([n_estimators, …]) An extra-trees regressor. ensemble.GradientBoostingClassifier (*[, …]) Gradient Boosting for classification. ensemble.GradientBoostingRegressor (*[, …]) Gradient Boosting for regression. 