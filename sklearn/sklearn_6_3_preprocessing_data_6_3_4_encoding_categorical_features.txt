sklearn_6_3_preprocessing_data
6.3. Preprocessing data
modules/preprocessing.html
 6.3.4. Encoding categorical features  Often features are not given as continuous values but categorical. For example a person could have features , , . Such features can be efficiently coded as integers, for instance could be expressed as while would be . To convert categorical features to such integer codes, we can use the OrdinalEncoder . This estimator transforms each categorical feature to one new feature of integers (0 to n_categories - 1): Such integer representation can, however, not be used directly with all scikit-learn estimators, as these expect continuous input, and would interpret the categories as being ordered, which is often not desired (i.e. the set of browsers was ordered arbitrarily). Another possibility to convert categorical features to features that can be used with scikit-learn estimators is to use a one-of-K, also known as one-hot or dummy encoding. This type of encoding can be obtained with the OneHotEncoder , which transforms each categorical feature with possible values into binary features, with one of them 1, and all others 0. Continuing the example above: By default, the values each feature can take is inferred automatically from the dataset and can be found in the attribute: It is possible to specify this explicitly using the parameter . There are two genders, four possible continents and four web browsers in our dataset: If there is a possibility that the training data might have missing categorical features, it can often be better to specify instead of setting the manually as above. When is specified and unknown categories are encountered during transform, no error will be raised but the resulting one-hot encoded columns for this feature will be all zeros ( is only supported for one-hot encoding): It is also possible to encode each column into columns instead of columns by using the parameter. This parameter allows the user to specify a category for each feature to be dropped. This is useful to avoid co-linearity in the input matrix in some classifiers. Such functionality is useful, for example, when using non-regularized regression ( LinearRegression ), since co-linearity would cause the covariance matrix to be non-invertible. When this parameter is not None, must be set to : One might want to drop one of the two columns only for features with 2 categories. In this case, you can set the parameter . In the transformed , the first column is the encoding of the feature with categories “male”/”female”, while the remaining 6 columns is the encoding of the 2 features with respectively 3 categories each. See Loading features from dicts for categorical features that are represented as a dict, not as scalars. 