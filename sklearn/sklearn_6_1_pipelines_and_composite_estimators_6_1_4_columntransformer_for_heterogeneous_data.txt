sklearn_6_1_pipelines_and_composite_estimators
6.1. Pipelines and composite estimators
modules/compose.html
 6.1.4. ColumnTransformer for heterogeneous data  Many datasets contain features of different types, say text, floats, and dates, where each type of feature requires separate preprocessing or feature extraction steps. Often it is easiest to preprocess data before applying scikit-learn methods, for example using pandas . Processing your data before passing it to scikit-learn might be problematic for one of the following reasons: Incorporating statistics from test data into the preprocessors makes cross-validation scores unreliable (known as data leakage ), for example in the case of scalers or imputing missing values. You may want to include the parameters of the preprocessors in a parameter search . The ColumnTransformer helps performing different transformations for different columns of the data, within a Pipeline that is safe from data leakage and that can be parametrized. ColumnTransformer works on arrays, sparse matrices, and pandas DataFrames . To each column, a different transformation can be applied, such as preprocessing or a specific feature extraction method: For this data, we might want to encode the column as a categorical variable using preprocessing.OneHotEncoder but apply a feature_extraction.text.CountVectorizer to the column. As we might use multiple feature extraction methods on the same column, we give each transformer a unique name, say and . By default, the remaining rating columns are ignored ( ): In the above example, the CountVectorizer expects a 1D array as input and therefore the columns were specified as a string ( ). However, preprocessing.OneHotEncoder as most of other transformers expects 2D data, therefore in that case you need to specify the column as a list of strings ( ). Apart from a scalar or a single item list, the column selection can be specified as a list of multiple items, an integer array, a slice, a boolean mask, or with a make_column_selector . The make_column_selector is used to select columns based on data type or column name: Strings can reference columns if the input is a DataFrame, integers are always interpreted as the positional columns. We can keep the remaining rating columns by setting . The values are appended to the end of the transformation: The parameter can be set to an estimator to transform the remaining rating columns. The transformed values are appended to the end of the transformation: The make_column_transformer function is available to more easily create a ColumnTransformer object. Specifically, the names will be given automatically. The equivalent for the above example would be: 