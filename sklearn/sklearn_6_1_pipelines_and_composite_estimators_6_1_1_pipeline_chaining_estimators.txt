sklearn_6_1_pipelines_and_composite_estimators
6.1. Pipelines and composite estimators
modules/compose.html
 6.1.1. Pipeline: chaining estimators  Pipeline can be used to chain multiple estimators into one. This is useful as there is often a fixed sequence of steps in processing the data, for example feature selection, normalization and classification. Pipeline serves multiple purposes here: Convenience and encapsulation You only have to call fit and predict once on your data to fit a whole sequence of estimators. Joint parameter selection You can grid search over parameters of all estimators in the pipeline at once. Safety Pipelines help avoid leaking statistics from your test data into the trained model in cross-validation, by ensuring that the same samples are used to train the transformers and predictors. All estimators in a pipeline, except the last one, must be transformers (i.e. must have a transform method). The last estimator may be any type (transformer, classifier, etc.). 6.1.1.1. Usage  6.1.1.1.1. Construction  The Pipeline is built using a list of pairs, where the is a string containing the name you want to give this step and is an estimator object: The utility function make_pipeline is a shorthand for constructing pipelines; it takes a variable number of estimators and returns a pipeline, filling in the names automatically: 6.1.1.1.2. Accessing steps  The estimators of a pipeline are stored as a list in the attribute, but can be accessed by index or name by indexing (with ) the Pipeline: Pipelineâ€™s attribute allows accessing steps by name with tab completion in interactive environments: A sub-pipeline can also be extracted using the slicing notation commonly used for Python Sequences such as lists or strings (although only a step of 1 is permitted). This is convenient for performing only some of the transformations (or their inverse): 6.1.1.1.3. Nested parameters  Parameters of the estimators in the pipeline can be accessed using the syntax: This is particularly important for doing grid searches: Individual steps may also be replaced as parameters, and non-final steps may be ignored by setting them to : The estimators of the pipeline can be retrieved by index: or by name: Examples: Pipeline Anova SVM Sample pipeline for text feature extraction and evaluation Pipelining: chaining a PCA and a logistic regression Explicit feature map approximation for RBF kernels SVM-Anova: SVM with univariate feature selection Selecting dimensionality reduction with Pipeline and GridSearchCV See also: Composite estimators and parameter spaces 6.1.1.2. Notes  Calling on the pipeline is the same as calling on each estimator in turn, the input and pass it on to the next step. The pipeline has all the methods that the last estimator in the pipeline has, i.e. if the last estimator is a classifier, the Pipeline can be used as a classifier. If the last estimator is a transformer, again, so is the pipeline. 6.1.1.3. Caching transformers: avoid repeated computation  Fitting transformers may be computationally expensive. With its parameter set, Pipeline will cache each transformer after calling . This feature is used to avoid computing the fit transformers within a pipeline if the parameters and input data are identical. A typical example is the case of a grid search in which the transformers can be fitted only once and reused for each configuration. The parameter is needed in order to cache the transformers. can be either a string containing the directory where to cache the transformers or a joblib.Memory object: Warning Side effect of caching transformers Using a Pipeline without cache enabled, it is possible to inspect the original instance such as: Enabling caching triggers a clone of the transformers before fitting. Therefore, the transformer instance given to the pipeline cannot be inspected directly. In following example, accessing the PCA instance will raise an since will be an unfitted transformer. Instead, use the attribute to inspect estimators within the pipeline: Examples: Selecting dimensionality reduction with Pipeline and GridSearchCV 