caret_13_using_your_own_model_in_train
13 Using Your Own Model in train
using-your-own-model-in-train.html
 13.4 The sort Element This is an optional function that sorts the tuning parameters from the simplest model to the most complex. There are times where this ordering is not obvious. This information is used when the performance values are tied across multiple parameters. We would probably want to choose the least complex model in those cases. Here, we will sort by the cost value. Smaller values of C produce smoother class boundaries than larger values: 13.4.1 The levels Element train ensures that classification models always predict factors with the same levels. To do this at prediction time, the package needs to know the levels from the model object (specifically, the finalModels slot of the train object). For model functions using S3 methods, train automatically attaches a character vector called obsLevels to the object and the package code uses this value. However, this strategy does not work for S4 methods. In these cases, the package will use the code found in the levels slot of the model list. For example, the ksvm function uses S4 methods but, unlike most model functions, has a built–in function called lev that will extract the class levels (if any). In this case, our levels code would be: In most other cases, the levels will beed to be extracted from data contained in the fitted model object. As another example, objects created using the ctree function in the party package would need to use: Again, this slot is only used for classification models using S4 methods. We should now be ready to fit our model. A plot of the data shows that the model doesn’t change when the cost value is above 16. 